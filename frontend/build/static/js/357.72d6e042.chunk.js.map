{"version":3,"file":"static/js/357.72d6e042.chunk.js","mappings":"gKAIA,MAgIA,EAhI2BA,KACvB,MAAOC,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,iBAC1CC,EAAUC,IAAeF,EAAAA,EAAAA,UAAS,CACrCG,MAAO,GACPC,YAAa,GACbC,eAAgB,MAEbC,EAASC,IAAcP,EAAAA,EAAAA,WAAS,IAChCQ,EAAOC,IAAYT,EAAAA,EAAAA,UAAS,MAC7BU,GAAWC,EAAAA,EAAAA,MAEXC,EAAqBC,IACvB,MAAM,KAAEC,EAAI,MAAEC,GAAUF,EAAEG,OAC1Bd,GAAYe,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACTD,GAAI,IACP,CAACH,GAAOC,KACT,EAqBP,OACII,EAAAA,EAAAA,KAAA,OAAKC,UAAU,8BAA6BC,UACxCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,sDAAqDC,SAAA,EAChEF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,0BAAyBC,SAAC,wBAEvCb,IACGW,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gFAA+EC,SACzFb,KAITc,EAAAA,EAAAA,MAAA,QAAMC,SA7BGC,UACjBX,EAAEY,iBACFlB,GAAW,GACXE,EAAS,MAET,IACI,MAAMiB,QAAoBC,EAAAA,EAAgBC,eAAe,CACrD9B,eACAG,aAGJS,EAAS,cAADmB,OAAeH,EAAYI,IACvC,CAAE,MAAOC,GACLtB,EAASsB,EAAIC,SAAW,6BACxBzB,GAAW,EACf,GAcqCc,SAAA,EACzBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,OAAMC,SAAA,EACjBF,EAAAA,EAAAA,KAAA,SAAOC,UAAU,6CAA4CC,SAAC,mBAG9DC,EAAAA,EAAAA,MAAA,UACIP,MAAOjB,EACPmC,SAAWpB,GAAMd,EAAgBc,EAAEG,OAAOD,OAC1CK,UAAU,kCAAiCC,SAAA,EAE3CF,EAAAA,EAAAA,KAAA,UAAQJ,MAAM,eAAcM,SAAC,kBAC7BF,EAAAA,EAAAA,KAAA,UAAQJ,MAAM,aAAYM,SAAC,sBAInCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,OAAMC,SAAA,EACjBF,EAAAA,EAAAA,KAAA,SAAOC,UAAU,6CAA4CC,SAAC,WAG9DF,EAAAA,EAAAA,KAAA,SACIe,KAAK,OACLpB,KAAK,QACLC,MAAOd,EAASE,MAChB8B,SAAUrB,EACVQ,UAAU,kCACVe,YAAY,uBACZC,UAAQ,QAIhBd,EAAAA,EAAAA,MAAA,OAAKF,UAAU,OAAMC,SAAA,EACjBF,EAAAA,EAAAA,KAAA,SAAOC,UAAU,6CAA4CC,SAAC,iBAG9DF,EAAAA,EAAAA,KAAA,YACIL,KAAK,cACLC,MAAOd,EAASG,YAChB6B,SAAUrB,EACVQ,UAAU,kCACVe,YAAY,6BACZE,KAAK,UAIbf,EAAAA,EAAAA,MAAA,OAAKF,UAAU,OAAMC,SAAA,EACjBF,EAAAA,EAAAA,KAAA,SAAOC,UAAU,6CAA4CC,SAAC,qBAG9DF,EAAAA,EAAAA,KAAA,SACIe,KAAK,OACLpB,KAAK,iBACLC,MAAOd,EAASI,eAChB4B,SAAUrB,EACVQ,UAAU,kCACVe,YAAY,wBACZC,UAAQ,QAIhBjB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oCAAmCC,UAC9CF,EAAAA,EAAAA,KAAA,UACIe,KAAK,SACLI,SAAUhC,EACVc,UAAS,gGAAAS,OAEHvB,EACI,iCACA,2CAA0C,kCAElDe,SAEDf,EAAU,cAAgB,6BAKzC,C,8CC8Bd,YA5JA,MACIiC,WAAAA,GAEIC,KAAKC,IAAMC,EAAAA,EAAMC,OAAO,CACpBC,QAASC,CAAAA,SAAAA,aAAAA,WAAAA,GAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,EAAAA,sBAAAA,4BAAAA,6BAAAA,cAAAA,8BAAAA,8BAAAA,+CAAAA,6CAAAA,6CAAAA,6CAAAA,gCAAAA,4BAAYC,mBAAqB,8BAI9CN,KAAKC,IAAIM,aAAaC,QAAQC,KACzBC,IACG,MAAMC,EAAQC,aAAaC,QAAQ,SAInC,OAHIF,IACAD,EAAOI,QAAuB,cAAC,UAAAzB,OAAasB,IAEzCD,CAAM,IAEhB1C,GACU+C,QAAQC,OAAOhD,KAK9BgC,KAAKC,IAAIM,aAAaU,SAASR,KAC1BQ,GAAaA,IACbjD,IAEG,IAAIA,EAAMiD,SAiBH,MAAIjD,EAAMwC,QAEP,IAAIU,MAAM,2BAGV,IAAIA,MAAM,4BArBhB,OAAQlD,EAAMiD,SAASE,QACnB,KAAK,IAEDnB,KAAKoB,qBACL,MACJ,KAAK,IACD,MAAM,IAAIF,MAAM,iBACpB,KAAK,IACD,MAAM,IAAIA,MAAM,sBACpB,KAAK,IACD,MAAM,IAAIA,MAAM,gBACpB,QACI,MAAM,IAAIA,MACNlD,EAAMiD,SAASI,KAAK7B,SAAW,gCAS/C,GAGZ,CAGA4B,kBAAAA,GAEIR,aAAaU,WAAW,SACxBV,aAAaU,WAAW,QACxBC,OAAOC,SAASC,KAAO,QAC3B,CAGA,oBAAMrC,CAAesC,GACjB,IAEI,aADuB1B,KAAKC,IAAI0B,KAAK,oBAAqBD,IAC1CL,IACpB,CAAE,MAAOrD,GACLgC,KAAK4B,YAAY5D,EAAO,2BAC5B,CACJ,CAGA,oBAAM6D,CAAeC,GACjB,IAEI,aADuB9B,KAAKC,IAAI0B,KAAK,cAADtC,OAAeyC,EAAU,aAC7CT,IACpB,CAAE,MAAOrD,GACLgC,KAAK4B,YAAY5D,EAAO,+BAC5B,CACJ,CAGA,sBAAM+D,CAAiBD,EAAYE,GAC/B,IAEI,aADuBhC,KAAKC,IAAI0B,KAAK,cAADtC,OAAeyC,EAAU,aAAa,CAAEE,iBAC5DX,IACpB,CAAE,MAAOrD,GACLgC,KAAK4B,YAAY5D,EAAO,2BAC5B,CACJ,CAGA,sBAAMiE,GACF,IAEI,aADuBjC,KAAKC,IAAIiC,IAAI,eACpBb,KAAKc,WAAa,EACtC,CAAE,MAAOnE,GACLgC,KAAK4B,YAAY5D,EAAO,4BAC5B,CACJ,CAGA,qBAAMoE,CAAgBN,GAClB,IAEI,aADuB9B,KAAKC,IAAIiC,IAAI,cAAD7C,OAAeyC,KAClCT,IACpB,CAAE,MAAOrD,GACLgC,KAAK4B,YAAY5D,EAAO,2BAC5B,CACJ,CAGA4D,WAAAA,CAAY5D,EAAOqE,GACf,GAAIrE,EAAMiD,SAAU,CAEhB,MAAMqB,EAAetE,EAAMiD,SAASI,KAAK7B,SAAW6C,EAEpD,MADAE,QAAQvE,MAAM,aAAcsE,GACtB,IAAIpB,MAAMoB,EACpB,CAAO,MAAItE,EAAMwC,SAEb+B,QAAQvE,MAAM,iBAAkBA,EAAMwC,SAChC,IAAIU,MAAM,kDAGhBqB,QAAQvE,MAAM,uBAAwBA,EAAMwB,SACtC,IAAI0B,MAAMmB,GAExB,CAKAG,cAAAA,CAAeC,GACX,MAAiC,iBAA1BA,EAASnF,YACpB,CAGAoF,cAAAA,CAAevB,GACX,OAAQA,GACJ,IAAK,QAUL,QACI,MAAO,gBATX,IAAK,SACD,MAAO,iBACX,IAAK,WACD,MAAO,gBACX,IAAK,cACD,MAAO,kBACX,IAAK,UACD,MAAO,eAInB,E","sources":["pages/CreateDocumentPage.js","services/documentService.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport DocumentService from '../services/documentService';\r\n\r\nconst CreateDocumentPage = () => {\r\n    const [documentType, setDocumentType] = useState('Transferable');\r\n    const [metadata, setMetadata] = useState({\r\n        title: '',\r\n        description: '',\r\n        documentNumber: ''\r\n    });\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const navigate = useNavigate();\r\n\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setMetadata(prev => ({\r\n            ...prev,\r\n            [name]: value\r\n        }));\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            const newDocument = await DocumentService.createDocument({\r\n                documentType,\r\n                metadata\r\n            });\r\n\r\n            navigate(`/documents/${newDocument.id}`);\r\n        } catch (err) {\r\n            setError(err.message || 'Failed to create document');\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"container mx-auto px-4 py-8\">\r\n            <div className=\"max-w-2xl mx-auto bg-white shadow-md rounded-lg p-8\">\r\n                <h1 className=\"text-2xl font-bold mb-6\">Create New Document</h1>\r\n\r\n                {error && (\r\n                    <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4\">\r\n                        {error}\r\n                    </div>\r\n                )}\r\n\r\n                <form onSubmit={handleSubmit}>\r\n                    <div className=\"mb-4\">\r\n                        <label className=\"block text-gray-700 text-sm font-bold mb-2\">\r\n                            Document Type\r\n                        </label>\r\n                        <select\r\n                            value={documentType}\r\n                            onChange={(e) => setDocumentType(e.target.value)}\r\n                            className=\"w-full px-3 py-2 border rounded\"\r\n                        >\r\n                            <option value=\"Transferable\">Transferable</option>\r\n                            <option value=\"Verifiable\">Verifiable</option>\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div className=\"mb-4\">\r\n                        <label className=\"block text-gray-700 text-sm font-bold mb-2\">\r\n                            Title\r\n                        </label>\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"title\"\r\n                            value={metadata.title}\r\n                            onChange={handleInputChange}\r\n                            className=\"w-full px-3 py-2 border rounded\"\r\n                            placeholder=\"Enter document title\"\r\n                            required\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"mb-4\">\r\n                        <label className=\"block text-gray-700 text-sm font-bold mb-2\">\r\n                            Description\r\n                        </label>\r\n                        <textarea\r\n                            name=\"description\"\r\n                            value={metadata.description}\r\n                            onChange={handleInputChange}\r\n                            className=\"w-full px-3 py-2 border rounded\"\r\n                            placeholder=\"Enter document description\"\r\n                            rows=\"4\"\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"mb-4\">\r\n                        <label className=\"block text-gray-700 text-sm font-bold mb-2\">\r\n                            Document Number\r\n                        </label>\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"documentNumber\"\r\n                            value={metadata.documentNumber}\r\n                            onChange={handleInputChange}\r\n                            className=\"w-full px-3 py-2 border rounded\"\r\n                            placeholder=\"Enter document number\"\r\n                            required\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"flex items-center justify-between\">\r\n                        <button\r\n                            type=\"submit\"\r\n                            disabled={loading}\r\n                            className={`\r\n                                w-full py-2 px-4 rounded \r\n                                ${loading \r\n                                    ? 'bg-gray-400 cursor-not-allowed' \r\n                                    : 'bg-blue-500 hover:bg-blue-700 text-white'\r\n                                }\r\n                            `}\r\n                        >\r\n                            {loading ? 'Creating...' : 'Create Document'}\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CreateDocumentPage;\r\n","import axios from 'axios';\r\n\r\nclass DocumentService {\r\n    constructor() {\r\n        // Create axios instance\r\n        this.api = axios.create({\r\n            baseURL: process.env.REACT_APP_API_URL || 'http://localhost:3000/api'\r\n        });\r\n\r\n        // Request interceptor for adding token\r\n        this.api.interceptors.request.use(\r\n            (config) => {\r\n                const token = localStorage.getItem('token');\r\n                if (token) {\r\n                    config.headers['Authorization'] = `Bearer ${token}`;\r\n                }\r\n                return config;\r\n            },\r\n            (error) => {\r\n                return Promise.reject(error);\r\n            }\r\n        );\r\n\r\n        // Response interceptor for error handling\r\n        this.api.interceptors.response.use(\r\n            (response) => response,\r\n            (error) => {\r\n                // Handle specific error scenarios\r\n                if (error.response) {\r\n                    switch (error.response.status) {\r\n                        case 401:\r\n                            // Token expired or unauthorized, redirect to login\r\n                            this.handleUnauthorized();\r\n                            break;\r\n                        case 403:\r\n                            throw new Error('Access denied');\r\n                        case 404:\r\n                            throw new Error('Resource not found');\r\n                        case 500:\r\n                            throw new Error('Server error');\r\n                        default:\r\n                            throw new Error(\r\n                                error.response.data.message || 'An unexpected error occurred'\r\n                            );\r\n                    }\r\n                } else if (error.request) {\r\n                    // Request made but no response received\r\n                    throw new Error('No response from server');\r\n                } else {\r\n                    // Error in setting up the request\r\n                    throw new Error('Error setting up request');\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    // Handle unauthorized access\r\n    handleUnauthorized() {\r\n        // Clear token and redirect to login\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('user');\r\n        window.location.href = '/login';\r\n    }\r\n\r\n    // Create Document\r\n    async createDocument(documentData) {\r\n        try {\r\n            const response = await this.api.post('/documents/create', documentData);\r\n            return response.data;\r\n        } catch (error) {\r\n            this.handleError(error, 'Document creation failed');\r\n        }\r\n    }\r\n\r\n    // Verify Document\r\n    async verifyDocument(documentId) {\r\n        try {\r\n            const response = await this.api.post(`/documents/${documentId}/verify`);\r\n            return response.data;\r\n        } catch (error) {\r\n            this.handleError(error, 'Document verification failed');\r\n        }\r\n    }\r\n\r\n    // Transfer Document\r\n    async transferDocument(documentId, recipientId) {\r\n        try {\r\n            const response = await this.api.post(`/documents/${documentId}/transfer`, { recipientId });\r\n            return response.data;\r\n        } catch (error) {\r\n            this.handleError(error, 'Document transfer failed');\r\n        }\r\n    }\r\n\r\n    // Get All Documents\r\n    async getUserDocuments() {\r\n        try {\r\n            const response = await this.api.get('/documents');\r\n            return response.data.documents || [];\r\n        } catch (error) {\r\n            this.handleError(error, 'Failed to fetch documents');\r\n        }\r\n    }\r\n\r\n    // Get Document by ID\r\n    async getDocumentById(documentId) {\r\n        try {\r\n            const response = await this.api.get(`/documents/${documentId}`);\r\n            return response.data;\r\n        } catch (error) {\r\n            this.handleError(error, 'Failed to fetch document');\r\n        }\r\n    }\r\n\r\n    // Generic Error Handler\r\n    handleError(error, defaultMessage) {\r\n        if (error.response) {\r\n            // Server responded with an error\r\n            const errorMessage = error.response.data.message || defaultMessage;\r\n            console.error('API Error:', errorMessage);\r\n            throw new Error(errorMessage);\r\n        } else if (error.request) {\r\n            // Request made but no response received\r\n            console.error('Network Error:', error.request);\r\n            throw new Error('Network error. Please check your connection.');\r\n        } else {\r\n            // Error in setting up the request\r\n            console.error('Request Setup Error:', error.message);\r\n            throw new Error(defaultMessage);\r\n        }\r\n    }\r\n\r\n    // Additional Utility Methods\r\n\r\n    // Check if a document is transferable\r\n    isTransferable(document) {\r\n        return document.documentType === 'Transferable';\r\n    }\r\n\r\n    // Get document status color\r\n    getStatusColor(status) {\r\n        switch (status) {\r\n            case 'Draft':\r\n                return 'text-gray-500';\r\n            case 'Active':\r\n                return 'text-green-500';\r\n            case 'Verified':\r\n                return 'text-blue-500';\r\n            case 'Transferred':\r\n                return 'text-purple-500';\r\n            case 'Revoked':\r\n                return 'text-red-500';\r\n            default:\r\n                return 'text-gray-500';\r\n        }\r\n    }\r\n}\r\n\r\nexport default new DocumentService();\r\n"],"names":["CreateDocumentPage","documentType","setDocumentType","useState","metadata","setMetadata","title","description","documentNumber","loading","setLoading","error","setError","navigate","useNavigate","handleInputChange","e","name","value","target","prev","_objectSpread","_jsx","className","children","_jsxs","onSubmit","async","preventDefault","newDocument","DocumentService","createDocument","concat","id","err","message","onChange","type","placeholder","required","rows","disabled","constructor","this","api","axios","create","baseURL","process","REACT_APP_API_URL","interceptors","request","use","config","token","localStorage","getItem","headers","Promise","reject","response","Error","status","handleUnauthorized","data","removeItem","window","location","href","documentData","post","handleError","verifyDocument","documentId","transferDocument","recipientId","getUserDocuments","get","documents","getDocumentById","defaultMessage","errorMessage","console","isTransferable","document","getStatusColor"],"sourceRoot":""}
{"version":3,"file":"static/js/661.d7e1f5a0.chunk.js","mappings":"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","sources":["pages/DocumentListPage.js","services/documentService.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport DocumentService from '../services/documentService';\r\n\r\nconst DocumentListPage = () => {\r\n    const [documents, setDocuments] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        const fetchDocuments = async () => {\r\n            try {\r\n                const fetchedDocuments = await DocumentService.getDocuments();\r\n                setDocuments(fetchedDocuments);\r\n                setLoading(false);\r\n            } catch (err) {\r\n                setError('Failed to fetch documents');\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchDocuments();\r\n    }, []);\r\n\r\n    const handleCreateDocument = () => {\r\n        navigate('/documents/create');\r\n    };\r\n\r\n    if (loading) return <div>Loading documents...</div>;\r\n    if (error) return <div>{error}</div>;\r\n\r\n    return (\r\n        <div className=\"container mx-auto p-4\">\r\n            <h1 className=\"text-2xl font-bold mb-4\">Documents</h1>\r\n            <button \r\n                onClick={handleCreateDocument}\r\n                className=\"bg-blue-500 text-white px-4 py-2 rounded mb-4\"\r\n            >\r\n                Create New Document\r\n            </button>\r\n\r\n            {documents.length === 0 ? (\r\n                <p>No documents found</p>\r\n            ) : (\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n                    {documents.map((doc) => (\r\n                        <div \r\n                            key={doc.id} \r\n                            className=\"border rounded p-4 shadow-md\"\r\n                        >\r\n                            <h2 className=\"text-xl font-semibold\">\r\n                                {doc.title || 'Untitled Document'}\r\n                            </h2>\r\n                            <p>{doc.documentType}</p>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DocumentListPage;\r\n","import axios from 'axios';\r\n\r\nclass DocumentService {\r\n    constructor() {\r\n        // Create axios instance\r\n        this.api = axios.create({\r\n            baseURL: process.env.REACT_APP_API_URL || 'http://localhost:3000/api'\r\n        });\r\n\r\n        // Request interceptor for adding token\r\n        this.api.interceptors.request.use(\r\n            (config) => {\r\n                const token = localStorage.getItem('token');\r\n                if (token) {\r\n                    config.headers['Authorization'] = `Bearer ${token}`;\r\n                }\r\n                return config;\r\n            },\r\n            (error) => {\r\n                return Promise.reject(error);\r\n            }\r\n        );\r\n\r\n        // Response interceptor for error handling\r\n        this.api.interceptors.response.use(\r\n            (response) => response,\r\n            (error) => {\r\n                // Handle specific error scenarios\r\n                if (error.response) {\r\n                    switch (error.response.status) {\r\n                        case 401:\r\n                            // Token expired or unauthorized, redirect to login\r\n                            this.handleUnauthorized();\r\n                            break;\r\n                        case 403:\r\n                            throw new Error('Access denied');\r\n                        case 404:\r\n                            throw new Error('Resource not found');\r\n                        case 500:\r\n                            throw new Error('Server error');\r\n                        default:\r\n                            throw new Error(\r\n                                error.response.data.message || 'An unexpected error occurred'\r\n                            );\r\n                    }\r\n                } else if (error.request) {\r\n                    // Request made but no response received\r\n                    throw new Error('No response from server');\r\n                } else {\r\n                    // Error in setting up the request\r\n                    throw new Error('Error setting up request');\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    // Handle unauthorized access\r\n    handleUnauthorized() {\r\n        // Clear token and redirect to login\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('user');\r\n        window.location.href = '/login';\r\n    }\r\n\r\n    // Create Document\r\n    async createDocument(documentData) {\r\n        try {\r\n            const response = await this.api.post('/documents/create', documentData);\r\n            return response.data;\r\n        } catch (error) {\r\n            this.handleError(error, 'Document creation failed');\r\n        }\r\n    }\r\n\r\n    // Verify Document\r\n    async verifyDocument(documentId) {\r\n        try {\r\n            const response = await this.api.post(`/documents/${documentId}/verify`);\r\n            return response.data;\r\n        } catch (error) {\r\n            this.handleError(error, 'Document verification failed');\r\n        }\r\n    }\r\n\r\n    // Transfer Document\r\n    async transferDocument(documentId, recipientId) {\r\n        try {\r\n            const response = await this.api.post(`/documents/${documentId}/transfer`, { recipientId });\r\n            return response.data;\r\n        } catch (error) {\r\n            this.handleError(error, 'Document transfer failed');\r\n        }\r\n    }\r\n\r\n    // Get All Documents\r\n    async getUserDocuments() {\r\n        try {\r\n            const response = await this.api.get('/documents');\r\n            return response.data.documents || [];\r\n        } catch (error) {\r\n            this.handleError(error, 'Failed to fetch documents');\r\n        }\r\n    }\r\n\r\n    // Get Document by ID\r\n    async getDocumentById(documentId) {\r\n        try {\r\n            const response = await this.api.get(`/documents/${documentId}`);\r\n            return response.data;\r\n        } catch (error) {\r\n            this.handleError(error, 'Failed to fetch document');\r\n        }\r\n    }\r\n\r\n    // Generic Error Handler\r\n    handleError(error, defaultMessage) {\r\n        if (error.response) {\r\n            // Server responded with an error\r\n            const errorMessage = error.response.data.message || defaultMessage;\r\n            console.error('API Error:', errorMessage);\r\n            throw new Error(errorMessage);\r\n        } else if (error.request) {\r\n            // Request made but no response received\r\n            console.error('Network Error:', error.request);\r\n            throw new Error('Network error. Please check your connection.');\r\n        } else {\r\n            // Error in setting up the request\r\n            console.error('Request Setup Error:', error.message);\r\n            throw new Error(defaultMessage);\r\n        }\r\n    }\r\n\r\n    // Additional Utility Methods\r\n\r\n    // Check if a document is transferable\r\n    isTransferable(document) {\r\n        return document.documentType === 'Transferable';\r\n    }\r\n\r\n    // Get document status color\r\n    getStatusColor(status) {\r\n        switch (status) {\r\n            case 'Draft':\r\n                return 'text-gray-500';\r\n            case 'Active':\r\n                return 'text-green-500';\r\n            case 'Verified':\r\n                return 'text-blue-500';\r\n            case 'Transferred':\r\n                return 'text-purple-500';\r\n            case 'Revoked':\r\n                return 'text-red-500';\r\n            default:\r\n                return 'text-gray-500';\r\n        }\r\n    }\r\n}\r\n\r\nexport default new DocumentService();\r\n"],"names":["DocumentListPage","documents","setDocuments","useState","loading","setLoading","error","setError","navigate","useNavigate","useEffect","async","fetchedDocuments","DocumentService","getDocuments","err","fetchDocuments","_jsx","children","_jsxs","className","onClick","handleCreateDocument","length","map","doc","title","documentType","id","constructor","this","api","axios","create","baseURL","process","REACT_APP_API_URL","interceptors","request","use","config","token","localStorage","getItem","headers","concat","Promise","reject","response","Error","status","handleUnauthorized","data","message","removeItem","window","location","href","createDocument","documentData","post","handleError","verifyDocument","documentId","transferDocument","recipientId","getUserDocuments","get","getDocumentById","defaultMessage","errorMessage","console","isTransferable","document","getStatusColor"],"sourceRoot":""}
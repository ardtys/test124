import { GasApiResponse, GaslessTransactionRequest, RequestUserInfoScope, UserInfo, WalletInfo, ConnectWithUIOptions, ShowUIPromiEvents } from '@magic-sdk/types';
import { BaseModule } from './base-module';
type ShowUiConfig = {
    onramperParams?: {
        [key: string]: string;
    };
};
export declare class WalletModule extends BaseModule {
    connectWithUI(options?: ConnectWithUIOptions): import("../util").PromiEvent<string[], {
        'id-token-created': (params: {
            idToken: string;
        }) => void;
    } & {
        wallet_connected: () => void;
        wallet_rejected: () => void;
        web3modal_selected: () => void;
    } & {
        done: (result: string[]) => void;
        error: (reason: any) => void;
        settled: () => void;
        "closed-by-user": () => void;
    }>;
    showUI(config?: ShowUiConfig): import("../util").PromiEvent<boolean, ShowUIPromiEvents & {
        done: (result: boolean) => void;
        error: (reason: any) => void;
        settled: () => void;
        "closed-by-user": () => void;
    }>;
    showAddress(): import("../util").PromiEvent<boolean, {
        done: (result: boolean) => void;
        error: (reason: any) => void;
        settled: () => void;
        "closed-by-user": () => void;
    }>;
    showSendTokensUI(): import("../util").PromiEvent<boolean, {
        done: (result: boolean) => void;
        error: (reason: any) => void;
        settled: () => void;
        "closed-by-user": () => void;
    }>;
    showOnRamp(): import("../util").PromiEvent<boolean, {
        done: (result: boolean) => void;
        error: (reason: any) => void;
        settled: () => void;
        "closed-by-user": () => void;
    }>;
    showNFTs(): import("../util").PromiEvent<boolean, {
        done: (result: boolean) => void;
        error: (reason: any) => void;
        settled: () => void;
        "closed-by-user": () => void;
    }>;
    showBalances(): import("../util").PromiEvent<boolean, {
        done: (result: boolean) => void;
        error: (reason: any) => void;
        settled: () => void;
        "closed-by-user": () => void;
    }>;
    sendGaslessTransaction(address: string, transaction: GaslessTransactionRequest): import("../util").PromiEvent<GasApiResponse, {
        done: (result: GasApiResponse) => void;
        error: (reason: any) => void;
        settled: () => void;
        "closed-by-user": () => void;
    }>;
    getInfo(): import("../util").PromiEvent<WalletInfo, {
        done: (result: WalletInfo) => void;
        error: (reason: any) => void;
        settled: () => void;
        "closed-by-user": () => void;
    }>;
    disconnect(): import("../util").PromiEvent<boolean, {
        done: (result: boolean) => void;
        error: (reason: any) => void;
        settled: () => void;
        "closed-by-user": () => void;
    }>;
    requestUserInfoWithUI(scope?: RequestUserInfoScope): import("../util").PromiEvent<UserInfo, {
        done: (result: UserInfo) => void;
        error: (reason: any) => void;
        settled: () => void;
        "closed-by-user": () => void;
    }>;
}
export {};

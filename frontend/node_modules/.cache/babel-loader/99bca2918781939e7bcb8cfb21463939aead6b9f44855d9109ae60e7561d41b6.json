{"ast":null,"code":"import axios from 'axios';\nimport { Magic } from 'magic-sdk';\nclass AuthService {\n  constructor() {\n    // Validate Magic Link key\n    if (!process.env.REACT_APP_MAGIC_PUBLISHABLE_KEY) {\n      console.error('❌ Magic Publishable Key is not set');\n      throw new Error('Magic Publishable Key is missing');\n    }\n\n    // Initialize Magic Link with comprehensive configuration\n    try {\n      this.magic = new Magic(process.env.REACT_APP_MAGIC_PUBLISHABLE_KEY, {\n        network: 'mainnet',\n        // or 'testnet'\n        logging: true\n      });\n    } catch (initError) {\n      console.error('❌ Magic SDK Initialization Error:', initError);\n      throw new Error('Failed to initialize Magic SDK');\n    }\n\n    // Create axios instance with detailed configuration\n    this.api = axios.create({\n      baseURL: process.env.REACT_APP_BACKEND_URL || 'http://localhost:3000/api',\n      timeout: 15000,\n      // 15 seconds timeout\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    });\n\n    // Request interceptor\n    this.api.interceptors.request.use(config => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        config.headers['Authorization'] = `Bearer ${token}`;\n      }\n      return config;\n    }, error => Promise.reject(error));\n  }\n\n  // Comprehensive email validation\n  validateEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(String(email).toLowerCase());\n  }\n  async login(email) {\n    // Extensive logging and error handling\n    console.group('🔐 Login Process Started');\n    console.log('📧 Email:', email);\n    try {\n      // Validate email format\n      if (!this.validateEmail(email)) {\n        console.error('❌ Invalid email format');\n        throw new Error('Please enter a valid email address');\n      }\n\n      // Magic Link Login\n      console.log('🔮 Initiating Magic Link Login');\n      const loginResult = await this.magic.auth.loginWithMagicLink({\n        email,\n        showUI: true\n      });\n      console.log('🔮 Magic Link Login Result:', loginResult);\n\n      // Get user metadata\n      const metadata = await this.magic.user.getMetadata();\n      console.log('👤 User Metadata:', metadata);\n\n      // Get DID Token\n      const didToken = await this.magic.user.getIdToken();\n      console.log('🔑 DID Token Generated');\n\n      // Backend Authentication Request\n      console.log('🌐 Sending Authentication Request to Backend');\n      const response = await this.api.post('/auth/magic-link', {\n        email: metadata.email,\n        publicAddress: metadata.publicAddress,\n        didToken: didToken\n      });\n      console.log('✅ Backend Authentication Response:', response.data);\n\n      // Store authentication details\n      localStorage.setItem('token', response.data.token);\n      localStorage.setItem('user', JSON.stringify(response.data.user));\n      console.groupEnd();\n      return response.data;\n    } catch (error) {\n      console.error('❌ Login Process Error:', error);\n      console.groupEnd();\n\n      // Detailed error handling\n      if (axios.isAxiosError(error)) {\n        // Backend returned an error response\n        if (error.response) {\n          console.error('🚨 Backend Error:', error.response.data);\n          throw new Error(error.response.data.message || 'Authentication failed. Please try again.');\n        }\n        // Request made but no response received\n        else if (error.request) {\n          console.error('🌐 No Response from Server');\n          throw new Error('No response from server. Check your network connection.');\n        }\n      }\n\n      // Magic Link or other errors\n      throw new Error(error.message || 'An unexpected error occurred during login. Please try again.');\n    }\n  }\n  async logout() {\n    try {\n      await this.magic.user.logout();\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n    } catch (error) {\n      console.error('Logout error', error);\n    }\n  }\n  isAuthenticated() {\n    return !!localStorage.getItem('token');\n  }\n  getCurrentUser() {\n    return JSON.parse(localStorage.getItem('user'));\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["axios","Magic","AuthService","constructor","process","env","REACT_APP_MAGIC_PUBLISHABLE_KEY","console","error","Error","magic","network","logging","initError","api","create","baseURL","REACT_APP_BACKEND_URL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Promise","reject","validateEmail","email","emailRegex","test","String","toLowerCase","login","group","log","loginResult","auth","loginWithMagicLink","showUI","metadata","user","getMetadata","didToken","getIdToken","response","post","publicAddress","data","setItem","JSON","stringify","groupEnd","isAxiosError","message","logout","removeItem","isAuthenticated","getCurrentUser","parse"],"sources":["C:/Users/Daffa/OneDrive/Desktop/XDC NETWORK/frontend/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\r\nimport { Magic } from 'magic-sdk';\r\n\r\nclass AuthService {\r\n    constructor() {\r\n        // Validate Magic Link key\r\n        if (!process.env.REACT_APP_MAGIC_PUBLISHABLE_KEY) {\r\n            console.error('❌ Magic Publishable Key is not set');\r\n            throw new Error('Magic Publishable Key is missing');\r\n        }\r\n\r\n        // Initialize Magic Link with comprehensive configuration\r\n        try {\r\n            this.magic = new Magic(process.env.REACT_APP_MAGIC_PUBLISHABLE_KEY, {\r\n                network: 'mainnet', // or 'testnet'\r\n                logging: true\r\n            });\r\n        } catch (initError) {\r\n            console.error('❌ Magic SDK Initialization Error:', initError);\r\n            throw new Error('Failed to initialize Magic SDK');\r\n        }\r\n        \r\n        // Create axios instance with detailed configuration\r\n        this.api = axios.create({\r\n            baseURL: process.env.REACT_APP_BACKEND_URL || 'http://localhost:3000/api',\r\n            timeout: 15000, // 15 seconds timeout\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            }\r\n        });\r\n\r\n        // Request interceptor\r\n        this.api.interceptors.request.use(\r\n            (config) => {\r\n                const token = localStorage.getItem('token');\r\n                if (token) {\r\n                    config.headers['Authorization'] = `Bearer ${token}`;\r\n                }\r\n                return config;\r\n            },\r\n            (error) => Promise.reject(error)\r\n        );\r\n    }\r\n\r\n    // Comprehensive email validation\r\n    validateEmail(email) {\r\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n        return emailRegex.test(String(email).toLowerCase());\r\n    }\r\n\r\n    async login(email) {\r\n        // Extensive logging and error handling\r\n        console.group('🔐 Login Process Started');\r\n        console.log('📧 Email:', email);\r\n\r\n        try {\r\n            // Validate email format\r\n            if (!this.validateEmail(email)) {\r\n                console.error('❌ Invalid email format');\r\n                throw new Error('Please enter a valid email address');\r\n            }\r\n\r\n            // Magic Link Login\r\n            console.log('🔮 Initiating Magic Link Login');\r\n            const loginResult = await this.magic.auth.loginWithMagicLink({ \r\n                email,\r\n                showUI: true \r\n            });\r\n            console.log('🔮 Magic Link Login Result:', loginResult);\r\n\r\n            // Get user metadata\r\n            const metadata = await this.magic.user.getMetadata();\r\n            console.log('👤 User Metadata:', metadata);\r\n\r\n            // Get DID Token\r\n            const didToken = await this.magic.user.getIdToken();\r\n            console.log('🔑 DID Token Generated');\r\n\r\n            // Backend Authentication Request\r\n            console.log('🌐 Sending Authentication Request to Backend');\r\n            const response = await this.api.post('/auth/magic-link', {\r\n                email: metadata.email,\r\n                publicAddress: metadata.publicAddress,\r\n                didToken: didToken\r\n            });\r\n\r\n            console.log('✅ Backend Authentication Response:', response.data);\r\n\r\n            // Store authentication details\r\n            localStorage.setItem('token', response.data.token);\r\n            localStorage.setItem('user', JSON.stringify(response.data.user));\r\n\r\n            console.groupEnd();\r\n            return response.data;\r\n\r\n        } catch (error) {\r\n            console.error('❌ Login Process Error:', error);\r\n            console.groupEnd();\r\n\r\n            // Detailed error handling\r\n            if (axios.isAxiosError(error)) {\r\n                // Backend returned an error response\r\n                if (error.response) {\r\n                    console.error('🚨 Backend Error:', error.response.data);\r\n                    throw new Error(\r\n                        error.response.data.message || \r\n                        'Authentication failed. Please try again.'\r\n                    );\r\n                } \r\n                // Request made but no response received\r\n                else if (error.request) {\r\n                    console.error('🌐 No Response from Server');\r\n                    throw new Error('No response from server. Check your network connection.');\r\n                }\r\n            }\r\n\r\n            // Magic Link or other errors\r\n            throw new Error(\r\n                error.message || \r\n                'An unexpected error occurred during login. Please try again.'\r\n            );\r\n        }\r\n    }\r\n\r\n    async logout() {\r\n        try {\r\n            await this.magic.user.logout();\r\n            localStorage.removeItem('token');\r\n            localStorage.removeItem('user');\r\n        } catch (error) {\r\n            console.error('Logout error', error);\r\n        }\r\n    }\r\n\r\n    isAuthenticated() {\r\n        return !!localStorage.getItem('token');\r\n    }\r\n\r\n    getCurrentUser() {\r\n        return JSON.parse(localStorage.getItem('user'));\r\n    }\r\n}\r\n\r\nexport default new AuthService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
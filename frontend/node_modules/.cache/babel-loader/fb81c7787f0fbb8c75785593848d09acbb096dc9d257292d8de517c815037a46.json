{"ast":null,"code":"import axios from 'axios';\nimport { Magic } from 'magic-sdk';\nclass AuthService {\n  constructor() {\n    // Validate Magic Link key\n    if (!process.env.REACT_APP_MAGIC_PUBLISHABLE_KEY) {\n      console.error('Magic Publishable Key is not set');\n      throw new Error('Magic Publishable Key is missing');\n    }\n\n    // Initialize Magic Link\n    this.magic = new Magic(process.env.REACT_APP_MAGIC_PUBLISHABLE_KEY, {\n      network: 'testnet',\n      // Specify network\n      locale: 'en_US'\n    });\n\n    // Create axios instance with comprehensive configuration\n    this.api = axios.create({\n      baseURL: process.env.REACT_APP_BACKEND_URL || 'http://localhost:3000/api',\n      timeout: 15000,\n      // Increased timeout\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    });\n\n    // Enhanced request interceptor\n    this.api.interceptors.request.use(config => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        config.headers['Authorization'] = `Bearer ${token}`;\n      }\n      return config;\n    }, error => Promise.reject(error));\n  }\n\n  // Comprehensive email validation\n  validateEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(String(email).toLowerCase());\n  }\n  async login(email) {\n    // Validate email format\n    if (!this.validateEmail(email)) {\n      throw new Error('Invalid email format');\n    }\n    try {\n      // Initiate Magic Link login with comprehensive options\n      const loginResult = await this.magic.auth.loginWithMagicLink({\n        email,\n        showUI: true // Shows Magic Link's UI\n      });\n\n      // Get user metadata\n      const metadata = await this.magic.user.getMetadata();\n\n      // Get DID Token for backend verification\n      const didToken = await this.magic.user.getIdToken();\n\n      // Comprehensive login request to backend\n      const response = await this.api.post('/auth/magic-link', {\n        email: metadata.email,\n        publicAddress: metadata.publicAddress,\n        didToken: didToken\n      }, {\n        // Additional axios configuration for error handling\n        validateStatus: function (status) {\n          return status >= 200 && status < 300; // Default\n        }\n      });\n\n      // Handle different response scenarios\n      if (response.status === 200) {\n        // Successful login\n        const {\n          token,\n          user\n        } = response.data;\n\n        // Secure storage of authentication details\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(user));\n        return {\n          token,\n          user\n        };\n      } else {\n        // Unexpected response\n        throw new Error('Unexpected login response');\n      }\n    } catch (error) {\n      var _error$response, _error$response2;\n      // Comprehensive error handling\n      console.error('Login Error:', {\n        name: error.name,\n        message: error.message,\n        response: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data,\n        status: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status\n      });\n\n      // Specific error messages\n      if (error.response) {\n        // Server responded with an error\n        switch (error.response.status) {\n          case 400:\n            throw new Error('Invalid login request');\n          case 401:\n            throw new Error('Authentication failed. Please check your credentials.');\n          case 403:\n            throw new Error('Access denied');\n          case 500:\n            throw new Error('Server error. Please try again later.');\n          default:\n            throw new Error(error.response.data.message || 'Login failed. Please try again.');\n        }\n      } else if (error.request) {\n        // Request made but no response received\n        throw new Error('No response from server. Check your network connection.');\n      } else {\n        // Error in request setup\n        throw new Error(error.message || 'Login request failed');\n      }\n    }\n  }\n  async logout() {\n    try {\n      // Logout from Magic Link\n      await this.magic.user.logout();\n\n      // Clear local storage\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n    } catch (error) {\n      console.error('Logout error', error);\n    }\n  }\n  isAuthenticated() {\n    const token = localStorage.getItem('token');\n    return !!token;\n  }\n  getCurrentUser() {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["axios","Magic","AuthService","constructor","process","env","REACT_APP_MAGIC_PUBLISHABLE_KEY","console","error","Error","magic","network","locale","api","create","baseURL","REACT_APP_BACKEND_URL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Promise","reject","validateEmail","email","emailRegex","test","String","toLowerCase","login","loginResult","auth","loginWithMagicLink","showUI","metadata","user","getMetadata","didToken","getIdToken","response","post","publicAddress","validateStatus","status","data","setItem","JSON","stringify","_error$response","_error$response2","name","message","logout","removeItem","isAuthenticated","getCurrentUser","parse"],"sources":["C:/Users/Daffa/OneDrive/Desktop/XDC NETWORK/frontend/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\r\nimport { Magic } from 'magic-sdk';\r\n\r\nclass AuthService {\r\n    constructor() {\r\n        // Validate Magic Link key\r\n        if (!process.env.REACT_APP_MAGIC_PUBLISHABLE_KEY) {\r\n            console.error('Magic Publishable Key is not set');\r\n            throw new Error('Magic Publishable Key is missing');\r\n        }\r\n\r\n        // Initialize Magic Link\r\n        this.magic = new Magic(process.env.REACT_APP_MAGIC_PUBLISHABLE_KEY, {\r\n            network: 'testnet', // Specify network\r\n            locale: 'en_US'\r\n        });\r\n        \r\n        // Create axios instance with comprehensive configuration\r\n        this.api = axios.create({\r\n            baseURL: process.env.REACT_APP_BACKEND_URL || 'http://localhost:3000/api',\r\n            timeout: 15000, // Increased timeout\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            }\r\n        });\r\n\r\n        // Enhanced request interceptor\r\n        this.api.interceptors.request.use(\r\n            (config) => {\r\n                const token = localStorage.getItem('token');\r\n                if (token) {\r\n                    config.headers['Authorization'] = `Bearer ${token}`;\r\n                }\r\n                return config;\r\n            },\r\n            (error) => Promise.reject(error)\r\n        );\r\n    }\r\n\r\n    // Comprehensive email validation\r\n    validateEmail(email) {\r\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n        return emailRegex.test(String(email).toLowerCase());\r\n    }\r\n\r\n    async login(email) {\r\n        // Validate email format\r\n        if (!this.validateEmail(email)) {\r\n            throw new Error('Invalid email format');\r\n        }\r\n\r\n        try {\r\n            // Initiate Magic Link login with comprehensive options\r\n            const loginResult = await this.magic.auth.loginWithMagicLink({ \r\n                email,\r\n                showUI: true // Shows Magic Link's UI\r\n            });\r\n\r\n            // Get user metadata\r\n            const metadata = await this.magic.user.getMetadata();\r\n\r\n            // Get DID Token for backend verification\r\n            const didToken = await this.magic.user.getIdToken();\r\n\r\n            // Comprehensive login request to backend\r\n            const response = await this.api.post('/auth/magic-link', {\r\n                email: metadata.email,\r\n                publicAddress: metadata.publicAddress,\r\n                didToken: didToken\r\n            }, {\r\n                // Additional axios configuration for error handling\r\n                validateStatus: function (status) {\r\n                    return status >= 200 && status < 300; // Default\r\n                }\r\n            });\r\n\r\n            // Handle different response scenarios\r\n            if (response.status === 200) {\r\n                // Successful login\r\n                const { token, user } = response.data;\r\n\r\n                // Secure storage of authentication details\r\n                localStorage.setItem('token', token);\r\n                localStorage.setItem('user', JSON.stringify(user));\r\n\r\n                return { token, user };\r\n            } else {\r\n                // Unexpected response\r\n                throw new Error('Unexpected login response');\r\n            }\r\n        } catch (error) {\r\n            // Comprehensive error handling\r\n            console.error('Login Error:', {\r\n                name: error.name,\r\n                message: error.message,\r\n                response: error.response?.data,\r\n                status: error.response?.status\r\n            });\r\n\r\n            // Specific error messages\r\n            if (error.response) {\r\n                // Server responded with an error\r\n                switch (error.response.status) {\r\n                    case 400:\r\n                        throw new Error('Invalid login request');\r\n                    case 401:\r\n                        throw new Error('Authentication failed. Please check your credentials.');\r\n                    case 403:\r\n                        throw new Error('Access denied');\r\n                    case 500:\r\n                        throw new Error('Server error. Please try again later.');\r\n                    default:\r\n                        throw new Error(\r\n                            error.response.data.message || \r\n                            'Login failed. Please try again.'\r\n                        );\r\n                }\r\n            } else if (error.request) {\r\n                // Request made but no response received\r\n                throw new Error('No response from server. Check your network connection.');\r\n            } else {\r\n                // Error in request setup\r\n                throw new Error(error.message || 'Login request failed');\r\n            }\r\n        }\r\n    }\r\n\r\n    async logout() {\r\n        try {\r\n            // Logout from Magic Link\r\n            await this.magic.user.logout();\r\n            \r\n            // Clear local storage\r\n            localStorage.removeItem('token');\r\n            localStorage.removeItem('user');\r\n        } catch (error) {\r\n            console.error('Logout error', error);\r\n        }\r\n    }\r\n\r\n    isAuthenticated() {\r\n        const token = localStorage.getItem('token');\r\n        return !!token;\r\n    }\r\n\r\n    getCurrentUser() {\r\n        const user = localStorage.getItem('user');\r\n        return user ? JSON.parse(user) : null;\r\n    }\r\n}\r\n\r\nexport default new AuthService();\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,WAAW;AAEjC,MAAMC,WAAW,CAAC;EACdC,WAAWA,CAAA,EAAG;IACV;IACA,IAAI,CAACC,OAAO,CAACC,GAAG,CAACC,+BAA+B,EAAE;MAC9CC,OAAO,CAACC,KAAK,CAAC,kCAAkC,CAAC;MACjD,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;IACvD;;IAEA;IACA,IAAI,CAACC,KAAK,GAAG,IAAIT,KAAK,CAACG,OAAO,CAACC,GAAG,CAACC,+BAA+B,EAAE;MAChEK,OAAO,EAAE,SAAS;MAAE;MACpBC,MAAM,EAAE;IACZ,CAAC,CAAC;;IAEF;IACA,IAAI,CAACC,GAAG,GAAGb,KAAK,CAACc,MAAM,CAAC;MACpBC,OAAO,EAAEX,OAAO,CAACC,GAAG,CAACW,qBAAqB,IAAI,2BAA2B;MACzEC,OAAO,EAAE,KAAK;MAAE;MAChBC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,QAAQ,EAAE;MACd;IACJ,CAAC,CAAC;;IAEF;IACA,IAAI,CAACL,GAAG,CAACM,YAAY,CAACC,OAAO,CAACC,GAAG,CAC5BC,MAAM,IAAK;MACR,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,IAAIF,KAAK,EAAE;QACPD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,KAAK,EAAE;MACvD;MACA,OAAOD,MAAM;IACjB,CAAC,EACAd,KAAK,IAAKkB,OAAO,CAACC,MAAM,CAACnB,KAAK,CACnC,CAAC;EACL;;EAEA;EACAoB,aAAaA,CAACC,KAAK,EAAE;IACjB,MAAMC,UAAU,GAAG,4BAA4B;IAC/C,OAAOA,UAAU,CAACC,IAAI,CAACC,MAAM,CAACH,KAAK,CAAC,CAACI,WAAW,CAAC,CAAC,CAAC;EACvD;EAEA,MAAMC,KAAKA,CAACL,KAAK,EAAE;IACf;IACA,IAAI,CAAC,IAAI,CAACD,aAAa,CAACC,KAAK,CAAC,EAAE;MAC5B,MAAM,IAAIpB,KAAK,CAAC,sBAAsB,CAAC;IAC3C;IAEA,IAAI;MACA;MACA,MAAM0B,WAAW,GAAG,MAAM,IAAI,CAACzB,KAAK,CAAC0B,IAAI,CAACC,kBAAkB,CAAC;QACzDR,KAAK;QACLS,MAAM,EAAE,IAAI,CAAC;MACjB,CAAC,CAAC;;MAEF;MACA,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAAC7B,KAAK,CAAC8B,IAAI,CAACC,WAAW,CAAC,CAAC;;MAEpD;MACA,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAAChC,KAAK,CAAC8B,IAAI,CAACG,UAAU,CAAC,CAAC;;MAEnD;MACA,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAAC/B,GAAG,CAACgC,IAAI,CAAC,kBAAkB,EAAE;QACrDhB,KAAK,EAAEU,QAAQ,CAACV,KAAK;QACrBiB,aAAa,EAAEP,QAAQ,CAACO,aAAa;QACrCJ,QAAQ,EAAEA;MACd,CAAC,EAAE;QACC;QACAK,cAAc,EAAE,SAAAA,CAAUC,MAAM,EAAE;UAC9B,OAAOA,MAAM,IAAI,GAAG,IAAIA,MAAM,GAAG,GAAG,CAAC,CAAC;QAC1C;MACJ,CAAC,CAAC;;MAEF;MACA,IAAIJ,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;QACzB;QACA,MAAM;UAAEzB,KAAK;UAAEiB;QAAK,CAAC,GAAGI,QAAQ,CAACK,IAAI;;QAErC;QACAzB,YAAY,CAAC0B,OAAO,CAAC,OAAO,EAAE3B,KAAK,CAAC;QACpCC,YAAY,CAAC0B,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACZ,IAAI,CAAC,CAAC;QAElD,OAAO;UAAEjB,KAAK;UAAEiB;QAAK,CAAC;MAC1B,CAAC,MAAM;QACH;QACA,MAAM,IAAI/B,KAAK,CAAC,2BAA2B,CAAC;MAChD;IACJ,CAAC,CAAC,OAAOD,KAAK,EAAE;MAAA,IAAA6C,eAAA,EAAAC,gBAAA;MACZ;MACA/C,OAAO,CAACC,KAAK,CAAC,cAAc,EAAE;QAC1B+C,IAAI,EAAE/C,KAAK,CAAC+C,IAAI;QAChBC,OAAO,EAAEhD,KAAK,CAACgD,OAAO;QACtBZ,QAAQ,GAAAS,eAAA,GAAE7C,KAAK,CAACoC,QAAQ,cAAAS,eAAA,uBAAdA,eAAA,CAAgBJ,IAAI;QAC9BD,MAAM,GAAAM,gBAAA,GAAE9C,KAAK,CAACoC,QAAQ,cAAAU,gBAAA,uBAAdA,gBAAA,CAAgBN;MAC5B,CAAC,CAAC;;MAEF;MACA,IAAIxC,KAAK,CAACoC,QAAQ,EAAE;QAChB;QACA,QAAQpC,KAAK,CAACoC,QAAQ,CAACI,MAAM;UACzB,KAAK,GAAG;YACJ,MAAM,IAAIvC,KAAK,CAAC,uBAAuB,CAAC;UAC5C,KAAK,GAAG;YACJ,MAAM,IAAIA,KAAK,CAAC,uDAAuD,CAAC;UAC5E,KAAK,GAAG;YACJ,MAAM,IAAIA,KAAK,CAAC,eAAe,CAAC;UACpC,KAAK,GAAG;YACJ,MAAM,IAAIA,KAAK,CAAC,uCAAuC,CAAC;UAC5D;YACI,MAAM,IAAIA,KAAK,CACXD,KAAK,CAACoC,QAAQ,CAACK,IAAI,CAACO,OAAO,IAC3B,iCACJ,CAAC;QACT;MACJ,CAAC,MAAM,IAAIhD,KAAK,CAACY,OAAO,EAAE;QACtB;QACA,MAAM,IAAIX,KAAK,CAAC,yDAAyD,CAAC;MAC9E,CAAC,MAAM;QACH;QACA,MAAM,IAAIA,KAAK,CAACD,KAAK,CAACgD,OAAO,IAAI,sBAAsB,CAAC;MAC5D;IACJ;EACJ;EAEA,MAAMC,MAAMA,CAAA,EAAG;IACX,IAAI;MACA;MACA,MAAM,IAAI,CAAC/C,KAAK,CAAC8B,IAAI,CAACiB,MAAM,CAAC,CAAC;;MAE9B;MACAjC,YAAY,CAACkC,UAAU,CAAC,OAAO,CAAC;MAChClC,YAAY,CAACkC,UAAU,CAAC,MAAM,CAAC;IACnC,CAAC,CAAC,OAAOlD,KAAK,EAAE;MACZD,OAAO,CAACC,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACxC;EACJ;EAEAmD,eAAeA,CAAA,EAAG;IACd,MAAMpC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAO,CAAC,CAACF,KAAK;EAClB;EAEAqC,cAAcA,CAAA,EAAG;IACb,MAAMpB,IAAI,GAAGhB,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IACzC,OAAOe,IAAI,GAAGW,IAAI,CAACU,KAAK,CAACrB,IAAI,CAAC,GAAG,IAAI;EACzC;AACJ;AAEA,eAAe,IAAItC,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
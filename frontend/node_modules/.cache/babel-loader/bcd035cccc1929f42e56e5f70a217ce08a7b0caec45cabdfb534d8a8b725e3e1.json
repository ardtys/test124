{"ast":null,"code":"import axios from 'axios';\nimport { Magic } from 'magic-sdk';\nclass AuthService {\n  constructor() {\n    // Validate Magic Link key\n    if (!process.env.REACT_APP_MAGIC_PUBLISHABLE_KEY) {\n      console.error('Magic Publishable Key is not set');\n    }\n\n    // Initialize Magic Link with comprehensive configuration\n    this.magic = new Magic(process.env.REACT_APP_MAGIC_PUBLISHABLE_KEY, {\n      logging: true\n    });\n\n    // Create axios instance with detailed configuration\n    this.api = axios.create({\n      baseURL: process.env.REACT_APP_BACKEND_URL || 'http://localhost:3000/api',\n      timeout: 10000,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Request interceptor with comprehensive logging\n    this.api.interceptors.request.use(config => {\n      console.log('Request Config:', {\n        url: config.url,\n        method: config.method,\n        headers: config.headers\n      });\n      const token = localStorage.getItem('token');\n      if (token) {\n        config.headers['Authorization'] = `Bearer ${token}`;\n      }\n      return config;\n    }, error => {\n      console.error('Request Interceptor Error:', error);\n      return Promise.reject(error);\n    });\n\n    // Response interceptor with detailed error handling\n    this.api.interceptors.response.use(response => {\n      console.log('Response:', {\n        status: response.status,\n        data: response.data\n      });\n      return response;\n    }, error => {\n      var _error$response, _error$response2;\n      console.error('Full Response Error:', {\n        status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n        data: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data,\n        message: error.message\n      });\n      return Promise.reject(error);\n    });\n  }\n\n  // Email validation method\n  validateEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(String(email).toLowerCase());\n  }\n  async login(email) {\n    try {\n      // Validate email\n      if (!this.validateEmail(email)) {\n        throw new Error('Invalid email format');\n      }\n      console.log('Initiating Magic Link Login for:', email);\n\n      // Initiate Magic Link login with comprehensive options\n      const magicLinkResult = await this.magic.auth.loginWithMagicLink({\n        email,\n        showUI: true\n      });\n      console.log('Magic Link Login Result:', magicLinkResult);\n\n      // Get user metadata\n      const metadata = await this.magic.user.getMetadata();\n      console.log('Magic Link Metadata:', metadata);\n\n      // Get DID Token for backend verification\n      const didToken = await this.magic.user.getIdToken();\n      console.log('DID Token:', didToken);\n\n      // Send comprehensive login request to backend\n      const response = await this.api.post('/auth/magic-link', {\n        email: metadata.email,\n        publicAddress: metadata.publicAddress,\n        didToken: didToken\n      });\n      console.log('Backend Login Response:', response.data);\n\n      // Store authentication details\n      localStorage.setItem('token', response.data.token);\n      localStorage.setItem('user', JSON.stringify(response.data.user));\n      return response.data;\n    } catch (error) {\n      var _error$response3;\n      // Comprehensive error logging and handling\n      console.error('Complete Login Process Error:', {\n        name: error.name,\n        message: error.message,\n        stack: error.stack,\n        responseData: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data\n      });\n\n      // Detailed error handling\n      if (error.response) {\n        // Server responded with an error\n        console.error('Server Error Response:', error.response.data);\n        throw new Error(error.response.data.message || 'Login failed. Please try again.');\n      } else if (error.request) {\n        // Request made but no response received\n        console.error('No Response Received:', error.request);\n        throw new Error('No response from server. Check your network connection.');\n      } else {\n        // Error in request setup\n        console.error('Request Setup Error:', error.message);\n        throw new Error(error.message || 'Login request failed');\n      }\n    }\n  }\n  async logout() {\n    try {\n      // Logout from Magic Link\n      await this.magic.user.logout();\n\n      // Clear local storage\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n    } catch (error) {\n      console.error('Logout error', error);\n    }\n  }\n  isAuthenticated() {\n    return !!localStorage.getItem('token');\n  }\n  getCurrentUser() {\n    return JSON.parse(localStorage.getItem('user'));\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["axios","Magic","AuthService","constructor","process","env","REACT_APP_MAGIC_PUBLISHABLE_KEY","console","error","magic","logging","api","create","baseURL","REACT_APP_BACKEND_URL","timeout","headers","interceptors","request","use","config","log","url","method","token","localStorage","getItem","Promise","reject","response","status","data","_error$response","_error$response2","message","validateEmail","email","emailRegex","test","String","toLowerCase","login","Error","magicLinkResult","auth","loginWithMagicLink","showUI","metadata","user","getMetadata","didToken","getIdToken","post","publicAddress","setItem","JSON","stringify","_error$response3","name","stack","responseData","logout","removeItem","isAuthenticated","getCurrentUser","parse"],"sources":["C:/Users/Daffa/OneDrive/Desktop/XDC NETWORK/frontend/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\r\nimport { Magic } from 'magic-sdk';\r\n\r\nclass AuthService {\r\n    constructor() {\r\n        // Validate Magic Link key\r\n        if (!process.env.REACT_APP_MAGIC_PUBLISHABLE_KEY) {\r\n            console.error('Magic Publishable Key is not set');\r\n        }\r\n\r\n        // Initialize Magic Link with comprehensive configuration\r\n        this.magic = new Magic(process.env.REACT_APP_MAGIC_PUBLISHABLE_KEY, {\r\n            logging: true\r\n        });\r\n        \r\n        // Create axios instance with detailed configuration\r\n        this.api = axios.create({\r\n            baseURL: process.env.REACT_APP_BACKEND_URL || 'http://localhost:3000/api',\r\n            timeout: 10000,\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n\r\n        // Request interceptor with comprehensive logging\r\n        this.api.interceptors.request.use(\r\n            (config) => {\r\n                console.log('Request Config:', {\r\n                    url: config.url,\r\n                    method: config.method,\r\n                    headers: config.headers\r\n                });\r\n                \r\n                const token = localStorage.getItem('token');\r\n                if (token) {\r\n                    config.headers['Authorization'] = `Bearer ${token}`;\r\n                }\r\n                return config;\r\n            },\r\n            (error) => {\r\n                console.error('Request Interceptor Error:', error);\r\n                return Promise.reject(error);\r\n            }\r\n        );\r\n\r\n        // Response interceptor with detailed error handling\r\n        this.api.interceptors.response.use(\r\n            (response) => {\r\n                console.log('Response:', {\r\n                    status: response.status,\r\n                    data: response.data\r\n                });\r\n                return response;\r\n            },\r\n            (error) => {\r\n                console.error('Full Response Error:', {\r\n                    status: error.response?.status,\r\n                    data: error.response?.data,\r\n                    message: error.message\r\n                });\r\n                return Promise.reject(error);\r\n            }\r\n        );\r\n    }\r\n\r\n    // Email validation method\r\n    validateEmail(email) {\r\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n        return emailRegex.test(String(email).toLowerCase());\r\n    }\r\n\r\n    async login(email) {\r\n        try {\r\n            // Validate email\r\n            if (!this.validateEmail(email)) {\r\n                throw new Error('Invalid email format');\r\n            }\r\n\r\n            console.log('Initiating Magic Link Login for:', email);\r\n\r\n            // Initiate Magic Link login with comprehensive options\r\n            const magicLinkResult = await this.magic.auth.loginWithMagicLink({ \r\n                email,\r\n                showUI: true\r\n            });\r\n\r\n            console.log('Magic Link Login Result:', magicLinkResult);\r\n\r\n            // Get user metadata\r\n            const metadata = await this.magic.user.getMetadata();\r\n            console.log('Magic Link Metadata:', metadata);\r\n\r\n            // Get DID Token for backend verification\r\n            const didToken = await this.magic.user.getIdToken();\r\n            console.log('DID Token:', didToken);\r\n\r\n            // Send comprehensive login request to backend\r\n            const response = await this.api.post('/auth/magic-link', {\r\n                email: metadata.email,\r\n                publicAddress: metadata.publicAddress,\r\n                didToken: didToken\r\n            });\r\n\r\n            console.log('Backend Login Response:', response.data);\r\n\r\n            // Store authentication details\r\n            localStorage.setItem('token', response.data.token);\r\n            localStorage.setItem('user', JSON.stringify(response.data.user));\r\n\r\n            return response.data;\r\n        } catch (error) {\r\n            // Comprehensive error logging and handling\r\n            console.error('Complete Login Process Error:', {\r\n                name: error.name,\r\n                message: error.message,\r\n                stack: error.stack,\r\n                responseData: error.response?.data\r\n            });\r\n\r\n            // Detailed error handling\r\n            if (error.response) {\r\n                // Server responded with an error\r\n                console.error('Server Error Response:', error.response.data);\r\n                throw new Error(\r\n                    error.response.data.message || \r\n                    'Login failed. Please try again.'\r\n                );\r\n            } else if (error.request) {\r\n                // Request made but no response received\r\n                console.error('No Response Received:', error.request);\r\n                throw new Error('No response from server. Check your network connection.');\r\n            } else {\r\n                // Error in request setup\r\n                console.error('Request Setup Error:', error.message);\r\n                throw new Error(error.message || 'Login request failed');\r\n            }\r\n        }\r\n    }\r\n\r\n    async logout() {\r\n        try {\r\n            // Logout from Magic Link\r\n            await this.magic.user.logout();\r\n            \r\n            // Clear local storage\r\n            localStorage.removeItem('token');\r\n            localStorage.removeItem('user');\r\n        } catch (error) {\r\n            console.error('Logout error', error);\r\n        }\r\n    }\r\n\r\n    isAuthenticated() {\r\n        return !!localStorage.getItem('token');\r\n    }\r\n\r\n    getCurrentUser() {\r\n        return JSON.parse(localStorage.getItem('user'));\r\n    }\r\n}\r\n\r\nexport default new AuthService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var p = (r => (r.MissingApiKey = \"MISSING_API_KEY\", r.ModalNotReady = \"MODAL_NOT_READY\", r.MalformedResponse = \"MALFORMED_RESPONSE\", r.InvalidArgument = \"INVALID_ARGUMENT\", r.ExtensionNotInitialized = \"EXTENSION_NOT_INITIALIZED\", r.IncompatibleExtensions = \"INCOMPATIBLE_EXTENSIONS\", r))(p || {}),\n  l = (a => (a.SyncWeb3Method = \"SYNC_WEB3_METHOD\", a.DuplicateIframe = \"DUPLICATE_IFRAME\", a.ReactNativeEndpointConfiguration = \"REACT_NATIVE_ENDPOINT_CONFIGURATION\", a.DeprecationNotice = \"DEPRECATION_NOTICE\", a.ProductAnnouncement = \"ANNOUNCEMENT\", a))(l || {}),\n  m = (i => (i[i.ParseError = -32700] = \"ParseError\", i[i.InvalidRequest = -32600] = \"InvalidRequest\", i[i.MethodNotFound = -32601] = \"MethodNotFound\", i[i.InvalidParams = -32602] = \"InvalidParams\", i[i.InternalError = -32603] = \"InternalError\", i[i.MagicLinkFailedVerification = -1e4] = \"MagicLinkFailedVerification\", i[i.MagicLinkExpired = -10001] = \"MagicLinkExpired\", i[i.MagicLinkRateLimited = -10002] = \"MagicLinkRateLimited\", i[i.MagicLinkInvalidRedirectURL = -10006] = \"MagicLinkInvalidRedirectURL\", i[i.UserAlreadyLoggedIn = -10003] = \"UserAlreadyLoggedIn\", i[i.UpdateEmailFailed = -10004] = \"UpdateEmailFailed\", i[i.UserRequestEditEmail = -10005] = \"UserRequestEditEmail\", i[i.InactiveRecipient = -10010] = \"InactiveRecipient\", i[i.AccessDeniedToUser = -10011] = \"AccessDeniedToUser\", i[i.RedirectLoginComplete = -10015] = \"RedirectLoginComplete\", i))(m || {});\nvar v = (t => (t.PROVIDER = \"magic_3pw_provider\", t.ADDRESS = \"magic_3pw_address\", t.CHAIN_ID = \"magic_3pw_chainId\", t))(v || {}),\n  u = (t => (t.WalletConnected = \"wallet_connected\", t.WalletRejected = \"wallet_rejected\", t.Web3ModalSelected = \"web3modal_selected\", t))(u || {}),\n  _ = (e => (e.LoginWithSms = \"magic_auth_login_with_sms\", e.LoginWithEmailOTP = \"magic_auth_login_with_email_otp\", e.LoginWithMagicLink = \"magic_auth_login_with_magic_link\", e.LoginWithCredential = \"magic_auth_login_with_credential\", e.SetAuthorizationToken = \"magic_auth_set_authorization_token\", e.GetIdToken = \"magic_auth_get_id_token\", e.GenerateIdToken = \"magic_auth_generate_id_token\", e.GetMetadata = \"magic_auth_get_metadata\", e.IsLoggedIn = \"magic_is_logged_in\", e.Logout = \"magic_auth_logout\", e.UpdateEmail = \"magic_auth_update_email\", e.UserSettings = \"magic_auth_settings\", e.UserSettingsTestMode = \"magic_auth_settings_testing_mode\", e.LoginWithSmsTestMode = \"magic_auth_login_with_sms_testing_mode\", e.LoginWithEmailOTPTestMode = \"magic_auth_login_with_email_otp_testing_mode\", e.LoginWithMagicLinkTestMode = \"magic_login_with_magic_link_testing_mode\", e.LoginWithCredentialTestMode = \"magic_auth_login_with_credential_testing_mode\", e.GetIdTokenTestMode = \"magic_auth_get_id_token_testing_mode\", e.GenerateIdTokenTestMode = \"magic_auth_generate_id_token_testing_mode\", e.GetMetadataTestMode = \"magic_auth_get_metadata_testing_mode\", e.IsLoggedInTestMode = \"magic_auth_is_logged_in_testing_mode\", e.LogoutTestMode = \"magic_auth_logout_testing_mode\", e.UpdateEmailTestMode = \"magic_auth_update_email_testing_mode\", e.IntermediaryEvent = \"magic_intermediary_event\", e.RequestAccounts = \"eth_requestAccounts\", e.GetInfo = \"magic_get_info\", e.ShowUI = \"magic_wallet\", e.NFTPurchase = \"magic_nft_purchase\", e.NFTCheckout = \"magic_nft_checkout\", e.NFTTransfer = \"magic_nft_transfer\", e.RequestUserInfoWithUI = \"mc_request_user_info\", e.Disconnect = \"mc_disconnect\", e.RecoverAccount = \"magic_auth_recover_account\", e.RecoverAccountTestMode = \"magic_auth_recover_account_testing_mode\", e.MagicBoxHeartBeat = \"magic_box_heart_beat\", e.AutoConnect = \"mc_auto_connect\", e.Login = \"mc_login\", e.EncryptV1 = \"magic_auth_encrypt_v1\", e.DecryptV1 = \"magic_auth_decrypt_v1\", e.ShowNFTs = \"magic_show_nfts\", e.ShowOnRamp = \"magic_show_fiat_onramp\", e.ShowSendTokensUI = \"magic_show_send_tokens_ui\", e.ShowAddress = \"magic_show_address\", e.ShowBalances = \"magic_show_balances\", e.SendGaslessTransaction = \"eth_sendGaslessTransaction\", e.RevealPK = \"magic_reveal_key\", e.EnableMFA = \"magic_auth_enable_mfa_flow\", e.DisableMFA = \"magic_auth_disable_mfa_flow\", e))(_ || {}),\n  z = [\"magic_intermediary_event\", \"magic_nft_checkout\", \"mc_login\"];\nvar f = (c => (c.MAGIC_HANDLE_RESPONSE = \"MAGIC_HANDLE_RESPONSE\", c.MAGIC_OVERLAY_READY = \"MAGIC_OVERLAY_READY\", c.MAGIC_SHOW_OVERLAY = \"MAGIC_SHOW_OVERLAY\", c.MAGIC_HIDE_OVERLAY = \"MAGIC_HIDE_OVERLAY\", c.MAGIC_HANDLE_EVENT = \"MAGIC_HANDLE_EVENT\", c.MAGIC_MG_BOX_SEND_RECEIPT = \"MAGIC_MG_BOX_SEND_RECEIPT\", c.MAGIC_SEND_PRODUCT_ANNOUNCEMENT = \"MAGIC_SEND_PRODUCT_ANNOUNCEMENT\", c.MAGIC_PONG = \"MAGIC_PONG\", c.MAGIC_POPUP_RESPONSE = \"MAGIC_POPUP_RESPONSE\", c.MAGIC_POPUP_OAUTH_VERIFY_RESPONSE = \"MAGIC_POPUP_OAUTH_VERIFY_RESPONSE\", c))(f || {}),\n  g = (d => (d.MAGIC_HANDLE_REQUEST = \"MAGIC_HANDLE_REQUEST\", d.MAGIC_PING = \"MAGIC_PING\", d))(g || {});\nvar E = (t => (t.UpdateEmail = \"update-email\", t.MFA = \"mfa\", t.Recovery = \"recovery\", t))(E || {});\nvar x = (o => (o.Retry = \"retry\", o))(x || {}),\n  y = (d => (d.EmailSent = \"email-sent\", d.EmailNotDeliverable = \"email-not-deliverable\", d))(y || {}),\n  A = (a => (a.VerifyEmailOtp = \"verify-email-otp\", a.VerifyMFACode = \"verify-mfa-code\", a.LostDevice = \"lost-device\", a.VerifyRecoveryCode = \"verify-recovery-code\", a.Cancel = \"cancel\", a))(A || {}),\n  R = (t => (t.VerifySmsOtp = \"verify-sms-otp\", t.Cancel = \"cancel\", t.Retry = \"retry\", t))(R || {}),\n  I = (t => (t.SmsOTPSent = \"sms-otp-sent\", t.InvalidSmsOtp = \"invalid-sms-otp\", t.ExpiredSmsOtp = \"expired-sms-otp\", t))(I || {}),\n  N = (s => (s.EmailOTPSent = \"email-otp-sent\", s.InvalidEmailOtp = \"invalid-email-otp\", s.InvalidMfaOtp = \"invalid-mfa-otp\", s.ExpiredEmailOtp = \"expired-email-otp\", s.MfaSentHandle = \"mfa-sent-handle\", s.RecoveryCodeSentHandle = \"recovery-code-sent-handle\", s.InvalidRecoveryCode = \"invalid-recovery-code\", s.RecoveryCodeSuccess = \"recovery-code-success\", s))(N || {}),\n  h = (o => (o.Retry = \"device-retry\", o))(h || {}),\n  T = (n => (n.DeviceApproved = \"device-approved\", n.DeviceNeedsApproval = \"device-needs-approval\", n.DeviceVerificationLinkExpired = \"device-verification-link-expired\", n.DeviceVerificationEmailSent = \"device-verification-email-sent\", n))(T || {}),\n  O = (n => (n.Retry = \"Recency/auth-factor-retry\", n.Cancel = \"Recency/auth-factor-verification-cancel\", n.VerifyEmailOtp = \"Recency/auth-factor-verify-email-otp\", n.VerifyMFACode = \"Recency/verify-mfa-code\", n))(O || {}),\n  S = (r => (r.PrimaryAuthFactorNeedsVerification = \"Recency/auth-factor-needs-verification\", r.PrimaryAuthFactorVerified = \"Recency/auth-factor-verified\", r.InvalidEmailOtp = \"Recency/auth-factor-invalid-email-otp\", r.EmailExpired = \"Recency/auth-factor-verification-email-expired\", r.EmailSent = \"Recency/auth-factor-verification-email-sent\", r.EmailNotDeliverable = \"Recency/auth-factor-verification-email-not-deliverable\", r))(S || {}),\n  b = (t => (t.RetryWithNewEmail = \"UpdateEmail/retry-with-new-email\", t.Cancel = \"UpdateEmail/new-email-verification-cancel\", t.VerifyEmailOtp = \"UpdateEmail/new-email-verify-otp\", t))(b || {}),\n  C = (s => (s.NewAuthFactorNeedsVerification = \"UpdateEmail/new-email-needs-verification\", s.EmailUpdated = \"UpdateEmail/email-updated\", s.InvalidEmailOtp = \"UpdateEmail/new-email-invalid-email-otp\", s.EmailExpired = \"UpdateEmail/new-email-verification-email-expired\", s.EmailSent = \"UpdateEmail/new-email-verification-email-sent\", s.EmailNotDeliverable = \"UpdateEmail/new-email-verification-email-not-deliverable\", s.InvalidEmail = \"UpdateEmail/new-email-invalid\", s.EmailAlreadyExists = \"UpdateEmail/new-email-already-exists\", s))(C || {}),\n  F = (o => (o.IDTokenCreated = \"Auth/id-token-created\", o))(F || {}),\n  U = (o => (o.Cancel = \"Farcaster/cancel\", o))(U || {}),\n  k = (t => (t.MFASecretGenerated = \"mfa-secret-generated\", t.InvalidMFAOtp = \"invalid-mfa-otp\", t.MFARecoveryCodes = \"mfa-recovery-codes\", t))(k || {}),\n  w = (d => (d.VerifyMFACode = \"verify-mfa-code\", d.Cancel = \"cancel-mfa-setup\", d))(w || {}),\n  L = (t => (t.MFACodeRequested = \"mfa-code-requested\", t.InvalidMFAOtp = \"invalid-mfa-otp\", t.InvalidRecoveryCode = \"invalid-recovery-code\", t))(L || {}),\n  D = (t => (t.VerifyMFACode = \"verify-mfa-code\", t.LostDevice = \"lost-device\", t.Cancel = \"cancel-mfa-disable\", t))(D || {});\nvar V = (o => (o.Harmony = \"HARMONY\", o))(V || {});\nvar G = (o => (o.ClosedByUser = \"closed-by-user\", o))(G || {}),\n  H = (o => (o.ClosedByUser = \"closed-by-user-on-received\", o))(H || {}),\n  q = (a => (a.EnterNewPhoneNumber = \"enter-new-phone-number\", a.EnterOtpCode = \"enter-otp-code\", a.RecoveryFactorAlreadyExists = \"recovery-factor-already-exists\", a.MalformedPhoneNumber = \"malformed-phone-number\", a.InvalidOtpCode = \"invalid-otp-code\", a))(q || {}),\n  W = (n => (n.SendNewPhoneNumber = \"send-new-phone-number\", n.SendOtpCode = \"send-otp-code\", n.Cancel = \"cancel\", n.StartEditPhoneNumber = \"start-edit-phone-number\", n))(W || {}),\n  J = (o => (o.PhoneNumber = \"phone_number\", o))(J || {}),\n  Y = (r => (r.SmsOtpSent = \"sms-otp-sent\", r.LoginThrottled = \"login-throttled\", r.InvalidSmsOtp = \"invalid-sms-otp\", r.SmsVerified = \"sms-verified\", r.AccountRecovered = \"account-recovered\", r.UpdateEmailRequired = \"update-email-required\", r))(Y || {}),\n  B = (n => (n.Cancel = \"cancel\", n.VerifyOtp = \"verify-otp-code\", n.ResendSms = \"resend-sms-otp\", n.UpdateEmail = \"update-email\", n))(B || {});\nvar P = (n => (n.Success = \"nft-checkout-success\", n.Failure = \"nft-checkout-failure\", n.Initiated = \"nft-checkout-initiated\", n.Disconnect = \"disconnect\", n))(P || {});\nvar j = (o => (o.WalletInfoFetched = \"Wallet/wallet-info-fetched\", o))(j || {});\nvar Q = (o => (o.CloseMagicWindow = \"close-magic-window\", o))(Q || {});\nexport { F as AuthEventOnReceived, E as DeepLinkPage, h as DeviceVerificationEventEmit, T as DeviceVerificationEventOnReceived, D as DisableMFAEventEmit, L as DisableMFAEventOnReceived, w as EnableMFAEventEmit, k as EnableMFAEventOnReceived, V as EthChainType, U as FarcasterLoginEventEmit, v as LocalStorageKeys, A as LoginWithEmailOTPEventEmit, N as LoginWithEmailOTPEventOnReceived, x as LoginWithMagicLinkEventEmit, y as LoginWithMagicLinkEventOnReceived, R as LoginWithSmsOTPEventEmit, I as LoginWithSmsOTPEventOnReceived, f as MagicIncomingWindowMessage, g as MagicOutgoingWindowMessage, _ as MagicPayloadMethod, P as NftCheckoutIntermediaryEvents, m as RPCErrorCode, O as RecencyCheckEventEmit, S as RecencyCheckEventOnReceived, B as RecoverAccountEventEmit, Y as RecoverAccountEventOnReceived, W as RecoveryFactorEventEmit, q as RecoveryFactorEventOnReceived, J as RecoveryMethodType, p as SDKErrorCode, l as SDKWarningCode, u as ThirdPartyWalletEvents, Q as UiEventsEmit, b as UpdateEmailEventEmit, C as UpdateEmailEventOnReceived, G as UserEventsEmit, H as UserEventsOnReceived, j as WalletEventOnReceived, z as routeToMagicMethods };","map":{"version":3,"names":["p","r","MissingApiKey","ModalNotReady","MalformedResponse","InvalidArgument","ExtensionNotInitialized","IncompatibleExtensions","l","a","SyncWeb3Method","DuplicateIframe","ReactNativeEndpointConfiguration","DeprecationNotice","ProductAnnouncement","m","i","ParseError","InvalidRequest","MethodNotFound","InvalidParams","InternalError","MagicLinkFailedVerification","MagicLinkExpired","MagicLinkRateLimited","MagicLinkInvalidRedirectURL","UserAlreadyLoggedIn","UpdateEmailFailed","UserRequestEditEmail","InactiveRecipient","AccessDeniedToUser","RedirectLoginComplete","v","t","PROVIDER","ADDRESS","CHAIN_ID","u","WalletConnected","WalletRejected","Web3ModalSelected","_","e","LoginWithSms","LoginWithEmailOTP","LoginWithMagicLink","LoginWithCredential","SetAuthorizationToken","GetIdToken","GenerateIdToken","GetMetadata","IsLoggedIn","Logout","UpdateEmail","UserSettings","UserSettingsTestMode","LoginWithSmsTestMode","LoginWithEmailOTPTestMode","LoginWithMagicLinkTestMode","LoginWithCredentialTestMode","GetIdTokenTestMode","GenerateIdTokenTestMode","GetMetadataTestMode","IsLoggedInTestMode","LogoutTestMode","UpdateEmailTestMode","IntermediaryEvent","RequestAccounts","GetInfo","ShowUI","NFTPurchase","NFTCheckout","NFTTransfer","RequestUserInfoWithUI","Disconnect","RecoverAccount","RecoverAccountTestMode","MagicBoxHeartBeat","AutoConnect","Login","EncryptV1","DecryptV1","ShowNFTs","ShowOnRamp","ShowSendTokensUI","ShowAddress","ShowBalances","SendGaslessTransaction","RevealPK","EnableMFA","DisableMFA","z","f","c","MAGIC_HANDLE_RESPONSE","MAGIC_OVERLAY_READY","MAGIC_SHOW_OVERLAY","MAGIC_HIDE_OVERLAY","MAGIC_HANDLE_EVENT","MAGIC_MG_BOX_SEND_RECEIPT","MAGIC_SEND_PRODUCT_ANNOUNCEMENT","MAGIC_PONG","MAGIC_POPUP_RESPONSE","MAGIC_POPUP_OAUTH_VERIFY_RESPONSE","g","d","MAGIC_HANDLE_REQUEST","MAGIC_PING","E","MFA","Recovery","x","o","Retry","y","EmailSent","EmailNotDeliverable","A","VerifyEmailOtp","VerifyMFACode","LostDevice","VerifyRecoveryCode","Cancel","R","VerifySmsOtp","I","SmsOTPSent","InvalidSmsOtp","ExpiredSmsOtp","N","s","EmailOTPSent","InvalidEmailOtp","InvalidMfaOtp","ExpiredEmailOtp","MfaSentHandle","RecoveryCodeSentHandle","InvalidRecoveryCode","RecoveryCodeSuccess","h","T","n","DeviceApproved","DeviceNeedsApproval","DeviceVerificationLinkExpired","DeviceVerificationEmailSent","O","S","PrimaryAuthFactorNeedsVerification","PrimaryAuthFactorVerified","EmailExpired","b","RetryWithNewEmail","C","NewAuthFactorNeedsVerification","EmailUpdated","InvalidEmail","EmailAlreadyExists","F","IDTokenCreated","U","k","MFASecretGenerated","InvalidMFAOtp","MFARecoveryCodes","w","L","MFACodeRequested","D","V","Harmony","G","ClosedByUser","H","q","EnterNewPhoneNumber","EnterOtpCode","RecoveryFactorAlreadyExists","MalformedPhoneNumber","InvalidOtpCode","W","SendNewPhoneNumber","SendOtpCode","StartEditPhoneNumber","J","PhoneNumber","Y","SmsOtpSent","LoginThrottled","SmsVerified","AccountRecovered","UpdateEmailRequired","B","VerifyOtp","ResendSms","P","Success","Failure","Initiated","j","WalletInfoFetched","Q","CloseMagicWindow","AuthEventOnReceived","DeepLinkPage","DeviceVerificationEventEmit","DeviceVerificationEventOnReceived","DisableMFAEventEmit","DisableMFAEventOnReceived","EnableMFAEventEmit","EnableMFAEventOnReceived","EthChainType","FarcasterLoginEventEmit","LocalStorageKeys","LoginWithEmailOTPEventEmit","LoginWithEmailOTPEventOnReceived","LoginWithMagicLinkEventEmit","LoginWithMagicLinkEventOnReceived","LoginWithSmsOTPEventEmit","LoginWithSmsOTPEventOnReceived","MagicIncomingWindowMessage","MagicOutgoingWindowMessage","MagicPayloadMethod","NftCheckoutIntermediaryEvents","RPCErrorCode","RecencyCheckEventEmit","RecencyCheckEventOnReceived","RecoverAccountEventEmit","RecoverAccountEventOnReceived","RecoveryFactorEventEmit","RecoveryFactorEventOnReceived","RecoveryMethodType","SDKErrorCode","SDKWarningCode","ThirdPartyWalletEvents","UiEventsEmit","UpdateEmailEventEmit","UpdateEmailEventOnReceived","UserEventsEmit","UserEventsOnReceived","WalletEventOnReceived","routeToMagicMethods"],"sources":["C:\\Users\\Daffa\\OneDrive\\Desktop\\XDC NETWORK\\frontend\\node_modules\\@magic-sdk\\types\\src\\core\\exception-types.ts","C:\\Users\\Daffa\\OneDrive\\Desktop\\XDC NETWORK\\frontend\\node_modules\\@magic-sdk\\types\\src\\core\\json-rpc-types.ts","C:\\Users\\Daffa\\OneDrive\\Desktop\\XDC NETWORK\\frontend\\node_modules\\@magic-sdk\\types\\src\\core\\message-types.ts","C:\\Users\\Daffa\\OneDrive\\Desktop\\XDC NETWORK\\frontend\\node_modules\\@magic-sdk\\types\\src\\core\\deep-link-pages.ts","C:\\Users\\Daffa\\OneDrive\\Desktop\\XDC NETWORK\\frontend\\node_modules\\@magic-sdk\\types\\src\\modules\\auth-types.ts","C:\\Users\\Daffa\\OneDrive\\Desktop\\XDC NETWORK\\frontend\\node_modules\\@magic-sdk\\types\\src\\modules\\rpc-provider-types.ts","C:\\Users\\Daffa\\OneDrive\\Desktop\\XDC NETWORK\\frontend\\node_modules\\@magic-sdk\\types\\src\\modules\\user-types.ts","C:\\Users\\Daffa\\OneDrive\\Desktop\\XDC NETWORK\\frontend\\node_modules\\@magic-sdk\\types\\src\\modules\\nft-types.ts","C:\\Users\\Daffa\\OneDrive\\Desktop\\XDC NETWORK\\frontend\\node_modules\\@magic-sdk\\types\\src\\modules\\wallet-types.ts","C:\\Users\\Daffa\\OneDrive\\Desktop\\XDC NETWORK\\frontend\\node_modules\\@magic-sdk\\types\\src\\modules\\common-types.ts"],"sourcesContent":["export enum SDKErrorCode {\n  MissingApiKey = 'MISSING_API_KEY',\n  ModalNotReady = 'MODAL_NOT_READY',\n  MalformedResponse = 'MALFORMED_RESPONSE',\n  InvalidArgument = 'INVALID_ARGUMENT',\n  ExtensionNotInitialized = 'EXTENSION_NOT_INITIALIZED',\n  IncompatibleExtensions = 'INCOMPATIBLE_EXTENSIONS',\n}\n\nexport enum SDKWarningCode {\n  SyncWeb3Method = 'SYNC_WEB3_METHOD',\n  DuplicateIframe = 'DUPLICATE_IFRAME',\n  ReactNativeEndpointConfiguration = 'REACT_NATIVE_ENDPOINT_CONFIGURATION',\n  DeprecationNotice = 'DEPRECATION_NOTICE',\n  ProductAnnouncement = 'ANNOUNCEMENT',\n}\n\nexport enum RPCErrorCode {\n  // Standard JSON RPC 2.0 Error Codes\n  ParseError = -32700,\n  InvalidRequest = -32600,\n  MethodNotFound = -32601,\n  InvalidParams = -32602,\n  InternalError = -32603,\n\n  // Custom RPC Error Codes\n  MagicLinkFailedVerification = -10000,\n  MagicLinkExpired = -10001,\n  MagicLinkRateLimited = -10002,\n  MagicLinkInvalidRedirectURL = -10006,\n  UserAlreadyLoggedIn = -10003,\n  UpdateEmailFailed = -10004,\n  UserRequestEditEmail = -10005,\n  InactiveRecipient = -10010,\n  AccessDeniedToUser = -10011,\n  RedirectLoginComplete = -10015,\n}\n\nexport type ErrorCode = SDKErrorCode | RPCErrorCode;\nexport type WarningCode = SDKWarningCode;\n","import { RPCErrorCode } from './exception-types';\n\n// --- Request interfaces\n\nexport interface JsonRpcRequestPayload<TParams = any> {\n  jsonrpc: string;\n  id: string | number | null;\n  method: string;\n  params?: TParams;\n}\n\nexport interface JsonRpcRequestCallback {\n  /** Callback executed upon JSON RPC response. */\n  (err: JsonRpcError | null, result?: JsonRpcResponsePayload | null): void;\n}\n\nexport interface JsonRpcBatchRequestCallback {\n  /** Callback executed upon JSON RPC response. */\n  (err: JsonRpcError | null, result?: (JsonRpcResponsePayload | null)[] | null): void;\n}\n\n// --- Response interfaces\n\nexport interface JsonRpcError {\n  message: string;\n  code: RPCErrorCode;\n  data?: any;\n}\n\nexport interface JsonRpcResponsePayload<ResultType = any> {\n  jsonrpc: string;\n  id: string | number | null;\n  result?: ResultType | null;\n  error?: JsonRpcError | null;\n}\n\nexport interface UserInfo {\n  email?: string;\n}\n\nexport type ShowUIPromiEvents = {\n  disconnect: () => void;\n};\n\nexport interface WalletInfo {\n  walletType: string;\n}\n\nexport interface RequestUserInfoScope {\n  scope?: {\n    email?: 'required' | 'optional';\n  };\n}\n\nexport enum LocalStorageKeys {\n  PROVIDER = 'magic_3pw_provider',\n  ADDRESS = 'magic_3pw_address',\n  CHAIN_ID = 'magic_3pw_chainId',\n}\n\nexport enum ThirdPartyWalletEvents {\n  WalletConnected = 'wallet_connected',\n  WalletRejected = 'wallet_rejected',\n  Web3ModalSelected = 'web3modal_selected',\n}\n\nexport interface ConnectWithUIOptions {\n  autoPromptThirdPartyWallets?: boolean;\n}\n\nexport type ConnectWithUiEvents = {\n  'id-token-created': (params: { idToken: string }) => void;\n} & { [key in ThirdPartyWalletEvents]: () => void };\n\n// --- Payload methods\n\n/**\n * Enum of JSON RPC methods for interacting with the Magic SDK authentication\n * relayer.\n */\nexport enum MagicPayloadMethod {\n  LoginWithSms = 'magic_auth_login_with_sms',\n  LoginWithEmailOTP = 'magic_auth_login_with_email_otp',\n  LoginWithMagicLink = 'magic_auth_login_with_magic_link',\n  LoginWithCredential = 'magic_auth_login_with_credential',\n  SetAuthorizationToken = 'magic_auth_set_authorization_token',\n  GetIdToken = 'magic_auth_get_id_token',\n  GenerateIdToken = 'magic_auth_generate_id_token',\n  GetMetadata = 'magic_auth_get_metadata',\n  IsLoggedIn = 'magic_is_logged_in',\n  Logout = 'magic_auth_logout',\n  UpdateEmail = 'magic_auth_update_email',\n  UserSettings = 'magic_auth_settings',\n  UserSettingsTestMode = 'magic_auth_settings_testing_mode',\n  LoginWithSmsTestMode = 'magic_auth_login_with_sms_testing_mode',\n  LoginWithEmailOTPTestMode = 'magic_auth_login_with_email_otp_testing_mode',\n  LoginWithMagicLinkTestMode = 'magic_login_with_magic_link_testing_mode',\n  LoginWithCredentialTestMode = 'magic_auth_login_with_credential_testing_mode',\n  GetIdTokenTestMode = 'magic_auth_get_id_token_testing_mode',\n  GenerateIdTokenTestMode = 'magic_auth_generate_id_token_testing_mode',\n  GetMetadataTestMode = 'magic_auth_get_metadata_testing_mode',\n  IsLoggedInTestMode = 'magic_auth_is_logged_in_testing_mode',\n  LogoutTestMode = 'magic_auth_logout_testing_mode',\n  UpdateEmailTestMode = 'magic_auth_update_email_testing_mode',\n  IntermediaryEvent = 'magic_intermediary_event',\n  RequestAccounts = 'eth_requestAccounts',\n  GetInfo = 'magic_get_info',\n  ShowUI = 'magic_wallet',\n  NFTPurchase = 'magic_nft_purchase',\n  NFTCheckout = 'magic_nft_checkout',\n  NFTTransfer = 'magic_nft_transfer',\n  RequestUserInfoWithUI = 'mc_request_user_info',\n  Disconnect = 'mc_disconnect',\n  // UpdatePhoneNumber = 'magic_auth_update_phone_number',\n  // UpdatePhoneNumberTestMode = 'magic_auth_update_phone_number_testing_mode',\n  RecoverAccount = 'magic_auth_recover_account',\n  RecoverAccountTestMode = 'magic_auth_recover_account_testing_mode',\n  MagicBoxHeartBeat = 'magic_box_heart_beat',\n  AutoConnect = 'mc_auto_connect',\n  Login = 'mc_login',\n  EncryptV1 = 'magic_auth_encrypt_v1',\n  DecryptV1 = 'magic_auth_decrypt_v1',\n  ShowNFTs = 'magic_show_nfts',\n  ShowOnRamp = 'magic_show_fiat_onramp',\n  ShowSendTokensUI = 'magic_show_send_tokens_ui',\n  ShowAddress = 'magic_show_address',\n  ShowBalances = 'magic_show_balances',\n  SendGaslessTransaction = 'eth_sendGaslessTransaction',\n  RevealPK = 'magic_reveal_key',\n  EnableMFA = 'magic_auth_enable_mfa_flow',\n  DisableMFA = 'magic_auth_disable_mfa_flow',\n}\n\n// Methods to not route if connected to third party wallet\nexport const routeToMagicMethods = [\n  MagicPayloadMethod.IntermediaryEvent,\n  MagicPayloadMethod.NFTCheckout,\n  MagicPayloadMethod.Login,\n];\n","import { JsonRpcResponsePayload, JsonRpcError, JsonRpcRequestPayload } from './json-rpc-types';\n\nexport enum MagicIncomingWindowMessage {\n  MAGIC_HANDLE_RESPONSE = 'MAGIC_HANDLE_RESPONSE',\n  MAGIC_OVERLAY_READY = 'MAGIC_OVERLAY_READY',\n  MAGIC_SHOW_OVERLAY = 'MAGIC_SHOW_OVERLAY',\n  MAGIC_HIDE_OVERLAY = 'MAGIC_HIDE_OVERLAY',\n  MAGIC_HANDLE_EVENT = 'MAGIC_HANDLE_EVENT',\n  MAGIC_MG_BOX_SEND_RECEIPT = 'MAGIC_MG_BOX_SEND_RECEIPT',\n  MAGIC_SEND_PRODUCT_ANNOUNCEMENT = 'MAGIC_SEND_PRODUCT_ANNOUNCEMENT',\n  MAGIC_PONG = 'MAGIC_PONG',\n  MAGIC_POPUP_RESPONSE = 'MAGIC_POPUP_RESPONSE',\n  MAGIC_POPUP_OAUTH_VERIFY_RESPONSE = 'MAGIC_POPUP_OAUTH_VERIFY_RESPONSE',\n}\n\nexport enum MagicOutgoingWindowMessage {\n  MAGIC_HANDLE_REQUEST = 'MAGIC_HANDLE_REQUEST',\n  MAGIC_PING = 'MAGIC_PING',\n}\n\n/** The shape of responding window message datas from the Magic iframe context. */\nexport interface MagicMessageRequest {\n  msgType: string;\n  payload: JsonRpcRequestPayload | JsonRpcRequestPayload[];\n  rt?: string;\n  jwt?: string;\n  deviceShare?: string;\n}\n\n/** The shape of responding window message datas from the Magic iframe context. */\nexport interface MagicMessageResponse<ResultType = any> {\n  msgType: string;\n  response: Partial<JsonRpcError> & Partial<JsonRpcResponsePayload<ResultType>>;\n  rt?: string;\n  deviceShare?: string;\n}\n\n/** The expected message event returned by the Magic iframe context. */\nexport interface MagicMessageEvent extends Partial<MessageEvent> {\n  data: MagicMessageResponse;\n}\n","export enum DeepLinkPage {\n  UpdateEmail = 'update-email',\n  MFA = 'mfa',\n  Recovery = 'recovery',\n}\n","import { WalletEventOnReceived } from './wallet-types';\n\nexport interface LoginWithMagicLinkConfiguration {\n  /**\n   * The email address of the user attempting to login.\n   */\n  email: string;\n\n  /**\n   * When `true`, a pre-built modal interface will show to the user, directing\n   * them to check their email for the \"magic link\" to complete their\n   * authentication.\n   */\n  showUI?: boolean;\n\n  /**\n   * You can optionally provide a redirect URI that will be followed at the end\n   * of the magic link flow. Don't forget to invoke\n   * `magic.auth.loginWithCredential()` to complete the login from the route you\n   * configure here.\n   */\n  redirectURI?: string;\n\n  /**\n   * Enterprise users with a custom SMTP can create custom email templates\n   * from their dashboard. The default Magic loginWithMagicLink email will be\n   * overriden when a variation is passed here.\n   */\n  overrides?: {\n    variation?: string;\n  };\n\n  /**\n   * The number of seconds until the generated Decenteralized ID token will expire.\n   */\n  lifespan?: number;\n}\n\nexport interface LoginWithSmsConfiguration {\n  /**\n   * Specify the phone number of the user attempting to login.\n   */\n  phoneNumber: string;\n\n  /**\n   * When `true`, a pre-built modal interface will show to the user, directing\n   * them to check their SMS for the one time passcode (OTP) to complete their\n   * authentication.\n   *\n   * When `false`, developers will be able to implement their own custom UI to\n   * continue the SMS OTP flow.\n   */\n  showUI?: boolean;\n\n  /*\n   * The number of seconds until the generated Decenteralized ID token will expire.\n   */\n  lifespan?: number;\n}\nexport interface LoginWithEmailOTPConfiguration {\n  /**\n   * Specify the email address of the user attempting to login.\n   */\n  email: string;\n\n  /**\n   * When `true`, a pre-built modal interface will show to the user, directing\n   * them to check their email for the one time passcode (OTP) to complete their\n   * authentication.\n   *\n   * When `false`, developers will be able to implement their own custom UI to\n   * continue the email OTP flow.\n   */\n  showUI?: boolean;\n\n  /**\n   * Device Unrecognized UI will enforce showing up to secure user's login\n   *\n   * When set to true (default), an improved device recognition UI will be displayed to the user,\n   * prompting them to verify their login by checking their email for device approval. This feature\n   * enhances authentication security.\n   *\n   * This param will only be affect if showUI is false. When set to false,\n   * developers have the flexibility to implement their own customized UI to\n   * handle device check events, providing a more tailored user experience.\n   */\n  deviceCheckUI?: boolean;\n\n  /**\n   * Enterprise users with a custom SMTP can create custom email templates\n   * from their dashboard. The default Magic loginWithOTP email will be\n   * overriden when a variation is passed here.\n   */\n  overrides?: {\n    variation?: string;\n  };\n\n  /**\n   * The number of seconds until the generated Decenteralized ID token will expire.\n   */\n  lifespan?: number;\n}\n\nexport interface LoginWithCredentialConfiguration {\n  /**\n   * A credential token or a valid query string (prefixed with ? or #)\n   */\n  credentialOrQueryString?: string;\n\n  /**\n   * The number of seconds until the generated Decenteralized ID token will expire.\n   */\n  lifespan?: number;\n}\n\nexport interface EnableMFAConfiguration {\n  /**\n   * When `true`, a pre-built modal interface will show to the user, directing\n   * them to enable MFA usign Google Authenticator app.\n   *\n   * When `false`, developers will be able to implement their own custom UI to\n   * continue the enable MFA flow.\n   */\n  showUI?: boolean;\n}\n\nexport interface DisableMFAConfiguration {\n  /**\n   * When `true`, a pre-built modal interface will show to the user, directing\n   * them to disable MFA.\n   *\n   * When `false`, developers will be able to implement their own custom UI to\n   * continue the disable MFA flow.\n   */\n  showUI?: boolean;\n}\n\n/**\n * Auth Events Enum\n */\nexport enum LoginWithMagicLinkEventEmit {\n  Retry = 'retry',\n}\n\nexport enum LoginWithMagicLinkEventOnReceived {\n  EmailSent = 'email-sent',\n  EmailNotDeliverable = 'email-not-deliverable',\n}\n\nexport enum LoginWithEmailOTPEventEmit {\n  VerifyEmailOtp = 'verify-email-otp',\n  VerifyMFACode = 'verify-mfa-code',\n  LostDevice = 'lost-device',\n  VerifyRecoveryCode = 'verify-recovery-code',\n  Cancel = 'cancel',\n}\n\nexport enum LoginWithSmsOTPEventEmit {\n  VerifySmsOtp = 'verify-sms-otp',\n  Cancel = 'cancel',\n  Retry = 'retry',\n}\n\nexport enum LoginWithSmsOTPEventOnReceived {\n  SmsOTPSent = 'sms-otp-sent',\n  InvalidSmsOtp = 'invalid-sms-otp',\n  ExpiredSmsOtp = 'expired-sms-otp',\n}\n\nexport enum LoginWithEmailOTPEventOnReceived {\n  EmailOTPSent = 'email-otp-sent',\n  InvalidEmailOtp = 'invalid-email-otp',\n  InvalidMfaOtp = 'invalid-mfa-otp',\n  ExpiredEmailOtp = 'expired-email-otp',\n  MfaSentHandle = 'mfa-sent-handle',\n  RecoveryCodeSentHandle = 'recovery-code-sent-handle',\n  InvalidRecoveryCode = 'invalid-recovery-code',\n  RecoveryCodeSuccess = 'recovery-code-success',\n}\n\nexport enum DeviceVerificationEventEmit {\n  Retry = 'device-retry',\n}\n\nexport enum DeviceVerificationEventOnReceived {\n  DeviceApproved = 'device-approved',\n  DeviceNeedsApproval = 'device-needs-approval',\n  DeviceVerificationLinkExpired = 'device-verification-link-expired',\n  DeviceVerificationEmailSent = 'device-verification-email-sent',\n}\n\nexport enum RecencyCheckEventEmit {\n  Retry = 'Recency/auth-factor-retry',\n  Cancel = 'Recency/auth-factor-verification-cancel',\n  VerifyEmailOtp = 'Recency/auth-factor-verify-email-otp',\n  VerifyMFACode = 'Recency/verify-mfa-code',\n}\n\nexport enum RecencyCheckEventOnReceived {\n  PrimaryAuthFactorNeedsVerification = 'Recency/auth-factor-needs-verification',\n  PrimaryAuthFactorVerified = 'Recency/auth-factor-verified',\n  InvalidEmailOtp = 'Recency/auth-factor-invalid-email-otp',\n  EmailExpired = 'Recency/auth-factor-verification-email-expired',\n  EmailSent = 'Recency/auth-factor-verification-email-sent',\n  EmailNotDeliverable = 'Recency/auth-factor-verification-email-not-deliverable',\n}\n\nexport enum UpdateEmailEventEmit {\n  RetryWithNewEmail = 'UpdateEmail/retry-with-new-email',\n  Cancel = 'UpdateEmail/new-email-verification-cancel',\n  VerifyEmailOtp = 'UpdateEmail/new-email-verify-otp',\n}\n\nexport enum UpdateEmailEventOnReceived {\n  NewAuthFactorNeedsVerification = 'UpdateEmail/new-email-needs-verification',\n  EmailUpdated = 'UpdateEmail/email-updated',\n  InvalidEmailOtp = 'UpdateEmail/new-email-invalid-email-otp',\n  EmailExpired = 'UpdateEmail/new-email-verification-email-expired',\n  EmailSent = 'UpdateEmail/new-email-verification-email-sent',\n  EmailNotDeliverable = 'UpdateEmail/new-email-verification-email-not-deliverable',\n  InvalidEmail = 'UpdateEmail/new-email-invalid',\n  EmailAlreadyExists = 'UpdateEmail/new-email-already-exists',\n}\n\nexport enum AuthEventOnReceived {\n  IDTokenCreated = 'Auth/id-token-created',\n}\n\nexport enum FarcasterLoginEventEmit {\n  Cancel = 'Farcaster/cancel',\n}\n\nexport enum EnableMFAEventOnReceived {\n  MFASecretGenerated = 'mfa-secret-generated',\n  InvalidMFAOtp = 'invalid-mfa-otp',\n  MFARecoveryCodes = 'mfa-recovery-codes',\n}\nexport enum EnableMFAEventEmit {\n  VerifyMFACode = 'verify-mfa-code',\n  Cancel = 'cancel-mfa-setup',\n}\n\nexport enum DisableMFAEventOnReceived {\n  MFACodeRequested = 'mfa-code-requested',\n  InvalidMFAOtp = 'invalid-mfa-otp',\n  InvalidRecoveryCode = 'invalid-recovery-code',\n}\n\nexport enum DisableMFAEventEmit {\n  VerifyMFACode = 'verify-mfa-code',\n  LostDevice = 'lost-device',\n  Cancel = 'cancel-mfa-disable',\n}\n\n/**\n * EventHandlers\n */\nexport type LoginWithMagicLinkEventHandlers = {\n  // Event Received\n  [LoginWithMagicLinkEventOnReceived.EmailSent]: () => void;\n  [LoginWithMagicLinkEventOnReceived.EmailNotDeliverable]: () => void;\n\n  // Event sent\n  [LoginWithMagicLinkEventEmit.Retry]: () => void;\n} & DeviceVerificationEventHandlers;\n\nexport type LoginWithSmsOTPEventHandlers = {\n  // Event sent\n  [LoginWithSmsOTPEventEmit.VerifySmsOtp]: (otp: string) => void;\n  [LoginWithSmsOTPEventEmit.Cancel]: () => void;\n  [LoginWithSmsOTPEventEmit.Retry]: () => void;\n\n  // Event received\n  [LoginWithSmsOTPEventOnReceived.SmsOTPSent]: () => void;\n  [LoginWithSmsOTPEventOnReceived.InvalidSmsOtp]: () => void;\n  [LoginWithSmsOTPEventOnReceived.ExpiredSmsOtp]: () => void;\n} & DeviceVerificationEventHandlers;\n\nexport type LoginWithEmailOTPEventHandlers = {\n  // Event Received\n  [LoginWithEmailOTPEventOnReceived.EmailOTPSent]: () => void;\n  [LoginWithEmailOTPEventOnReceived.InvalidEmailOtp]: () => void;\n  [LoginWithEmailOTPEventOnReceived.InvalidMfaOtp]: () => void;\n  [LoginWithEmailOTPEventOnReceived.ExpiredEmailOtp]: () => void;\n  [LoginWithEmailOTPEventOnReceived.MfaSentHandle]: () => void;\n  [LoginWithEmailOTPEventOnReceived.RecoveryCodeSentHandle]: () => void;\n  [LoginWithEmailOTPEventOnReceived.InvalidRecoveryCode]: () => void;\n  [LoginWithEmailOTPEventOnReceived.RecoveryCodeSuccess]: () => void;\n  [AuthEventOnReceived.IDTokenCreated]: (idToken: string) => void;\n  [WalletEventOnReceived.WalletInfoFetched]: () => void;\n\n  // Event sent\n  [LoginWithEmailOTPEventEmit.VerifyEmailOtp]: (otp: string) => void;\n  [LoginWithEmailOTPEventEmit.VerifyMFACode]: (mfa: string) => void;\n  [LoginWithEmailOTPEventEmit.LostDevice]: () => void;\n  [LoginWithEmailOTPEventEmit.VerifyRecoveryCode]: (recoveryCode: string) => void;\n  [LoginWithEmailOTPEventEmit.Cancel]: () => void;\n} & DeviceVerificationEventHandlers;\n\ntype DeviceVerificationEventHandlers = {\n  // Event Received\n  [DeviceVerificationEventOnReceived.DeviceNeedsApproval]: () => void;\n  [DeviceVerificationEventOnReceived.DeviceVerificationEmailSent]: () => void;\n  [DeviceVerificationEventOnReceived.DeviceVerificationLinkExpired]: () => void;\n  [DeviceVerificationEventOnReceived.DeviceApproved]: () => void;\n\n  // Event sent\n  [DeviceVerificationEventEmit.Retry]: () => void;\n};\n\n/**\n * Update Email\n */\n\nexport type RecencyCheckEventHandlers = {\n  [RecencyCheckEventOnReceived.PrimaryAuthFactorNeedsVerification]: () => void;\n  [RecencyCheckEventOnReceived.PrimaryAuthFactorVerified]: () => void;\n  [RecencyCheckEventOnReceived.InvalidEmailOtp]: () => void;\n  [RecencyCheckEventOnReceived.EmailNotDeliverable]: () => void;\n  [RecencyCheckEventOnReceived.EmailExpired]: () => void;\n  [RecencyCheckEventOnReceived.EmailSent]: () => void;\n\n  [RecencyCheckEventEmit.Cancel]: () => void;\n  [RecencyCheckEventEmit.Retry]: () => void;\n  [RecencyCheckEventEmit.VerifyEmailOtp]: (otp: string) => void;\n  [RecencyCheckEventEmit.VerifyMFACode]: (mfa: string) => void;\n};\n\nexport type UpdateEmailEventHandlers = {\n  [UpdateEmailEventOnReceived.NewAuthFactorNeedsVerification]: () => void;\n  [UpdateEmailEventOnReceived.EmailUpdated]: () => void;\n  [UpdateEmailEventOnReceived.InvalidEmailOtp]: () => void;\n  [UpdateEmailEventOnReceived.EmailNotDeliverable]: () => void;\n  [UpdateEmailEventOnReceived.EmailExpired]: () => void;\n  [UpdateEmailEventOnReceived.EmailSent]: () => void;\n  [UpdateEmailEventOnReceived.InvalidEmail]: () => void;\n  [UpdateEmailEventOnReceived.EmailAlreadyExists]: () => void;\n\n  [UpdateEmailEventEmit.Cancel]: () => void;\n  [UpdateEmailEventEmit.RetryWithNewEmail]: (email?: string) => void;\n  [UpdateEmailEventEmit.VerifyEmailOtp]: (otp: string) => void;\n} & RecencyCheckEventHandlers;\n\n/**\n * Enable MFA\n */\n\nexport type EnableMFAEventHandlers = {\n  // Event Received\n  [EnableMFAEventOnReceived.MFASecretGenerated]: ({ QRCode, key }: { QRCode: string; key: string }) => void;\n  [EnableMFAEventOnReceived.InvalidMFAOtp]: ({ errorCode }: { errorCode: string }) => void;\n  [EnableMFAEventOnReceived.MFARecoveryCodes]: ({ recoveryCode }: { recoveryCode: string }) => void;\n\n  // Event sent\n  [EnableMFAEventEmit.VerifyMFACode]: (totp: string) => void;\n  [EnableMFAEventEmit.Cancel]: () => void;\n};\n\n/**\n * Disable MFA\n */\n\nexport type DisableMFAEventHandlers = {\n  // Event Received\n  [DisableMFAEventOnReceived.MFACodeRequested]: () => void;\n  [DisableMFAEventOnReceived.InvalidMFAOtp]: ({ errorCode }: { errorCode: string }) => void;\n  [DisableMFAEventOnReceived.InvalidRecoveryCode]: () => void;\n\n  // Event sent\n  [DisableMFAEventEmit.VerifyMFACode]: (totp: string) => void;\n  [DisableMFAEventEmit.LostDevice]: (recoveryCode: string) => void;\n  [DisableMFAEventEmit.Cancel]: () => void;\n};\n","export type EthNetworkName = 'mainnet' | 'goerli' | 'sepolia';\n\nexport enum EthChainType {\n  Harmony = 'HARMONY',\n}\n\nexport interface CustomNodeConfiguration {\n  rpcUrl: string;\n  chainId?: number;\n  chainType?: EthChainType;\n}\n\nexport type EthNetworkConfiguration = EthNetworkName | CustomNodeConfiguration;\n\nexport type ProviderEnableEvents = {\n  'id-token-created': (params: { idToken: string }) => void;\n};\n","import { RecencyCheckEventHandlers } from './auth-types';\nimport { DeepLinkPage } from '../core/deep-link-pages';\n\nexport interface GetIdTokenConfiguration {\n  /**\n   * The number of seconds until the generated ID token will expire.\n   */\n  lifespan?: number;\n}\n\nexport interface GenerateIdTokenConfiguration extends GetIdTokenConfiguration {\n  /**\n   * An optional piece of data to sign with the token. Note, however, that the\n   * unsigned data _will not_ be encoded in the token, only an encrypted\n   * signature of the data.\n   */\n  attachment?: string;\n}\n\nexport enum UserEventsEmit {\n  ClosedByUser = 'closed-by-user',\n}\n\nexport enum UserEventsOnReceived {\n  ClosedByUser = 'closed-by-user-on-received',\n}\n\nexport interface MagicUserMetadata {\n  issuer: string | null;\n  publicAddress: string | null;\n  email: string | null;\n  phoneNumber: string | null;\n  isMfaEnabled: boolean;\n  recoveryFactors: [RecoveryFactor] | [];\n  walletType: string;\n}\n\nexport enum RecoveryFactorEventOnReceived {\n  EnterNewPhoneNumber = 'enter-new-phone-number',\n  EnterOtpCode = 'enter-otp-code',\n  RecoveryFactorAlreadyExists = 'recovery-factor-already-exists',\n  MalformedPhoneNumber = 'malformed-phone-number',\n  InvalidOtpCode = 'invalid-otp-code',\n}\n\nexport enum RecoveryFactorEventEmit {\n  SendNewPhoneNumber = 'send-new-phone-number',\n  SendOtpCode = 'send-otp-code',\n  Cancel = 'cancel',\n  StartEditPhoneNumber = 'start-edit-phone-number',\n}\n\ntype RecoveryFactor = {\n  type: RecoveryMethodType;\n  value: string;\n};\n\nexport type RecoveryFactorEventHandlers = {\n  // Event Received\n  [RecoveryFactorEventEmit.SendNewPhoneNumber]: (phone_number: string) => void;\n  [RecoveryFactorEventEmit.SendOtpCode]: (otp: string) => void;\n  [RecoveryFactorEventEmit.StartEditPhoneNumber]: () => void;\n  [RecoveryFactorEventEmit.Cancel]: () => void;\n\n  // Event sent\n  [RecoveryFactorEventOnReceived.EnterNewPhoneNumber]: () => void;\n  [RecoveryFactorEventOnReceived.EnterOtpCode]: () => void;\n  [RecoveryFactorEventOnReceived.RecoveryFactorAlreadyExists]: () => void;\n  [RecoveryFactorEventOnReceived.MalformedPhoneNumber]: () => void;\n  [RecoveryFactorEventOnReceived.InvalidOtpCode]: () => void;\n} & RecencyCheckEventHandlers;\n\nexport enum RecoveryMethodType {\n  PhoneNumber = 'phone_number',\n}\n\nexport interface UpdateEmailConfiguration {\n  /**\n   * The new email address to update to\n   */\n  email: string;\n\n  /**\n   * When `true`, a pre-built pending modal interface will\n   * guide the user to check their new, followed by old emails\n   * for confirmation emails.\n   */\n  showUI?: boolean;\n}\n\nexport interface UpdateWebAuthnInfoConfiguration {\n  /**\n   *  WebAuthn info id\n   */\n  id: string;\n\n  /**\n   *  nickname that user attempts to update to the webauth device associate to the id.\n   */\n  nickname: string;\n}\n\nexport interface RecoverAccountConfiguration {\n  /**\n   * The email to recover\n   */\n  email: string;\n  showUI: boolean;\n}\n\nexport interface ShowSettingsConfiguration {\n  /**\n   * deep linking destination\n   */\n  page: DeepLinkPage;\n  showUI?: boolean;\n}\n\nexport enum RecoverAccountEventOnReceived {\n  SmsOtpSent = 'sms-otp-sent',\n  LoginThrottled = 'login-throttled',\n  InvalidSmsOtp = 'invalid-sms-otp',\n  SmsVerified = 'sms-verified',\n  AccountRecovered = 'account-recovered',\n  UpdateEmailRequired = 'update-email-required',\n}\n\nexport enum RecoverAccountEventEmit {\n  Cancel = 'cancel',\n  VerifyOtp = 'verify-otp-code',\n  ResendSms = 'resend-sms-otp',\n  UpdateEmail = 'update-email',\n}\n\nexport type RecoverAccountEventHandlers = {\n  // Event Received\n  [RecoverAccountEventEmit.Cancel]: () => void;\n  [RecoverAccountEventEmit.VerifyOtp]: (otp: string) => void;\n  [RecoverAccountEventEmit.ResendSms]: () => void;\n  [RecoverAccountEventEmit.UpdateEmail]: (email: string) => void;\n\n  // Event sent\n  [RecoverAccountEventOnReceived.SmsOtpSent]: ({ phoneNumber }: { phoneNumber: string }) => void;\n  [RecoverAccountEventOnReceived.LoginThrottled]: (error: string) => void;\n  [RecoverAccountEventOnReceived.InvalidSmsOtp]: ({\n    errorMessage,\n    errorCode,\n  }: {\n    errorMessage: string;\n    errorCode: string;\n  }) => void;\n  [RecoverAccountEventOnReceived.SmsVerified]: () => void;\n  [RecoverAccountEventOnReceived.AccountRecovered]: () => void;\n  [RecoverAccountEventOnReceived.UpdateEmailRequired]: () => void;\n};\n","export type NFTResponseStatus = 'cancelled' | 'pending' | 'processed' | 'declined' | 'expired';\n\nexport type NFTResponse = {\n  status: NFTResponseStatus;\n};\n\nexport interface NFTPurchaseRequest {\n  nft: {\n    name: string;\n    imageUrl: string;\n    blockchainNftId: string;\n    contractAddress: string;\n    network: string;\n    platform: string;\n    type: string;\n  };\n  identityPrefill: {\n    firstName: string;\n    lastName: string;\n    dateOfBirth: string; // YYYY-MM-DD\n    emailAddress: string;\n    phone: string;\n    address: {\n      street1: string;\n      street2: string;\n      city: string;\n      regionCode: string;\n      postalCode: string;\n      countryCode: string;\n    };\n  };\n}\n\nexport type NFTPurchaseResponse = NFTResponse & {\n  errorMessage?: string;\n};\n\nexport interface NFTCheckoutRequest {\n  // given by magic / found in the developer dashboard in future\n  contractId: string;\n  // in contract, if ERC1155… for ERC721, use token ID = 0\n  tokenId: string;\n  name: string;\n  imageUrl: string;\n  quantity?: number; // default is 1\n  walletAddress?: string; // default is user's wallet address\n  // If enabled, the user will be able to pay with crypto. the default is false\n  isCryptoCheckoutEnabled?: boolean;\n  walletProvider?: 'magic' | 'web3modal';\n}\n\nexport type NFTCheckoutResponse = NFTResponse;\n\nexport type NFTCheckoutEvents = {\n  disconnect: () => void;\n  'nft-checkout-initiated': (rawTransaction: string) => void;\n};\n\nexport interface NFTTransferRequest {\n  tokenId: string;\n  contractAddress: string;\n  quantity?: number;\n  recipient?: string;\n}\n\nexport type NFTTransferResponse = NFTResponse;\n\nexport enum NftCheckoutIntermediaryEvents {\n  Success = 'nft-checkout-success',\n  Failure = 'nft-checkout-failure',\n  Initiated = 'nft-checkout-initiated',\n  Disconnect = 'disconnect',\n}\n\nexport type NftCheckoutEventHandler = {\n  [NftCheckoutIntermediaryEvents.Initiated]: (rawTransaction: string) => void;\n  [NftCheckoutIntermediaryEvents.Success]: (signedTransaction: string) => void;\n  [NftCheckoutIntermediaryEvents.Failure]: () => void;\n};\n","export type GasApiResponse = {\n  request_id: string;\n  state: string;\n  success: boolean;\n};\n\nexport type AccessListEntry = { address: string; storageKeys: Array<string> };\n\n/**\n *  An ordered collection of [[AccessList]] entries.\n */\nexport type AccessList = Array<AccessListEntry>;\n\nexport interface GaslessTransactionRequest {\n  /**\n   *  The transaction type.\n   */\n  type?: number;\n\n  /**\n   *  The target of the transaction.\n   */\n  to?: string;\n\n  /**\n   *  The sender of the transaction.\n   */\n  from?: string;\n\n  /**\n   *  The nonce of the transaction, used to prevent replay attacks.\n   */\n\n  nonce?: number;\n\n  /**\n   *  The maximum amount of gas to allow this transaction to consime.\n   */\n  gasLimit?: bigint;\n\n  /**\n   *  The gas price to use for legacy transactions or transactions on\n   *  legacy networks.\n   *\n   *  Most of the time the ``max*FeePerGas`` is preferred.\n   */\n  gasPrice?: bigint;\n\n  /**\n   *  The [[link-eip-1559]] maximum priority fee to pay per gas.\n   */\n  maxPriorityFeePerGas?: bigint;\n\n  /**\n   *  The [[link-eip-1559]] maximum total fee to pay per gas. The actual\n   *  value used is protocol enforced to be the block's base fee.\n   */\n  maxFeePerGas?: bigint;\n\n  /**\n   *  The transaction data.\n   */\n  data?: string;\n\n  /**\n   *  The transaction value (in wei).\n   */\n  value?: bigint;\n\n  /**\n   *  The chain ID for the network this transaction is valid on.\n   */\n  chainId?: bigint;\n\n  /**\n   *  The [[link-eip-2930]] access list. Storage slots included in the access\n   *  list are //warmed// by pre-loading them, so their initial cost to\n   *  fetch is guaranteed, but then each additional access is cheaper.\n   */\n  accessList?: AccessList;\n\n  /**\n   *  A custom object, which can be passed along for network-specific\n   *  values.\n   */\n  customData?: any;\n}\n\nexport enum WalletEventOnReceived {\n  WalletInfoFetched = 'Wallet/wallet-info-fetched',\n}\n","export enum UiEventsEmit {\n  CloseMagicWindow = 'close-magic-window',\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}